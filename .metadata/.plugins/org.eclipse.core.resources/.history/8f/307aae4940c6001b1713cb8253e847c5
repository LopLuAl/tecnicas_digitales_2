/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "arrebote.h"
#include "task.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define LED_TICKS (125)
/* USER CODE END PD */
typedef struct tarea
{
	TaskHandle_t handle1;
	TaskHandle_t handle2;
	uint32_t led1;
	uint32_t led2;
}tarea;
/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void StartDefaultTask(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	uint32_t xor32 (void)
	{
	  static uint32_t y = 2463534242;	/*semilla */
	  y ^= y << 13;
	  y ^= y >> 17;
	  y ^= y << 5;

	  return y%3;
	}
	void setear_led(int n_led, int estado)
	{
		switch(n_led)
		{
			case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, (estado)?GPIO_PIN_SET:GPIO_PIN_RESET); break;
			case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, (estado)?GPIO_PIN_SET:GPIO_PIN_RESET); break;
		}
	}

	void invertir_led(int n_led)
	{
		switch(n_led)
		{
			case 0: HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8); break;
			case 1: HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); break;
		}
	}

	int leer_pulsador(int n_pulsador)
	{
		int ret;
		switch(n_pulsador)
		{
			case 0: ret = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0); break;
			case 1: ret = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); break;
		}
		return ret;
	}

	void tarea_led_placa(void *p)
	{
		while(1)
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			vTaskDelay(LED_TICKS/portTICK_RATE_MS);
		}
	}

void tarea_pulsadores(void *p)
{
	uint8_t estado = 0;

	for (;;)
	{
		if (leer_pulsador(0) == 0)
		{
			if (estado != 1){
				vTaskPrioritySet( ((tarea*)p)->handle1, tskIDLE_PRIORITY + 2 );
				vTaskPrioritySet( ((tarea*)p)->handle2, tskIDLE_PRIORITY + 1 );
				estado = 1;
			}
			else{
				vTaskPrioritySet( ((tarea*)p)->handle1, tskIDLE_PRIORITY + 1 );
				vTaskPrioritySet( ((tarea*)p)->handle2, tskIDLE_PRIORITY + 2 );
				estado = 0;
			}
		}
		if (leer_pulsador(1) == 0)
		{
			switch(xor32())
			{
				case 0:
					vTaskPrioritySet( ((tarea*)p)->handle1, tskIDLE_PRIORITY + 1 );
					vTaskPrioritySet( ((tarea*)p)->handle2, tskIDLE_PRIORITY + 1 );
					break;
				case 1:
					vTaskPrioritySet( ((tarea*)p)->handle1, tskIDLE_PRIORITY + 1 );
					vTaskPrioritySet( ((tarea*)p)->handle2, tskIDLE_PRIORITY + 2 );
					break;
				case 2:
					vTaskPrioritySet( ((tarea*)p)->handle1, tskIDLE_PRIORITY + 2 );
					vTaskPrioritySet( ((tarea*)p)->handle2, tskIDLE_PRIORITY + 1 );
					break;
				default:
					break;
			}
		}
		vTaskDelay(LED_TICKS/portTICK_RATE_MS);
	}
}
void tarea_led1(void *dato_led)
{
	for (;;)
	{
		invertir_led(	((tarea *)dato_led)->led1);
		vTaskDelay(LED_TICKS/portTICK_RATE_MS);
	}
}
void tarea_led2(void *dato_led)
{
	for (;;)
	{
		invertir_led(	((tarea *)dato_led)->led2);
		vTaskDelay(LED_TICKS/portTICK_RATE_MS);
	}
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
	tarea tarea_led;
	TaskHandle_t handle1,handle2;

	tarea_led.led1= LED_1;
	tarea_led.led2= LED_2;

	tarea_led.handle1 = handle1;
	tarea_led.handle2 = handle2;
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  setear_led(0, 1);
  setear_led(1, 0);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(tarea_led_placa,
		  "led",
		  configMINIMAL_STACK_SIZE,
		  NULL,
		  tskIDLE_PRIORITY+1,
		  NULL);
 /* xTaskCreate(tarea_pulsadores,
  		  "tarea_pulsadores",
  		  configMINIMAL_STACK_SIZE,
  		  (void *)&tarea_led,
  		  tskIDLE_PRIORITY+3,
  		  NULL);*/
  xTaskCreate(tarea_led1,
  		  "tarea_led1",
  		  configMINIMAL_STACK_SIZE,
  		  (void *)&tarea_led,
  		  tskIDLE_PRIORITY+1,
		  handle1);
 /* xTaskCreate(tarea_led2,
  		  "tarea_led2",
  		  configMINIMAL_STACK_SIZE,
		  (void *)&tarea_led,
  		  tskIDLE_PRIORITY+1,
		  handle2);*/

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */
}

 /**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
