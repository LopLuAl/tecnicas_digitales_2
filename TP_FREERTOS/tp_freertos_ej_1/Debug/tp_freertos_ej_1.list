
tp_freertos_ej_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d18  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea8  08003ea8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003ea8  08003ea8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ea8  08003ea8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f94  20000014  08003ec4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa8  08003ec4  00021fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140f9  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fc  00000000  00000000  00034136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00036b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00037b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023d8  00000000  00000000  00038ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dff  00000000  00000000  0003ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090618  00000000  00000000  0004bc87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc29f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d4  00000000  00000000  000dc2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08003e10 	.word	0x08003e10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08003e10 	.word	0x08003e10

08000150 <tarea_random>:
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* USER CODE BEGIN PV */
void tarea_random (void *p)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	while(1)
	{
		static uint32_t y = 2463534242;	/*semilla */
		y ^= y << 13;
 8000158:	4b0c      	ldr	r3, [pc, #48]	; (800018c <tarea_random+0x3c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	035a      	lsls	r2, r3, #13
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <tarea_random+0x3c>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4053      	eors	r3, r2
 8000164:	4a09      	ldr	r2, [pc, #36]	; (800018c <tarea_random+0x3c>)
 8000166:	6013      	str	r3, [r2, #0]
		y ^= y >> 17;
 8000168:	4b08      	ldr	r3, [pc, #32]	; (800018c <tarea_random+0x3c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	0c5a      	lsrs	r2, r3, #17
 800016e:	4b07      	ldr	r3, [pc, #28]	; (800018c <tarea_random+0x3c>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	4053      	eors	r3, r2
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <tarea_random+0x3c>)
 8000176:	6013      	str	r3, [r2, #0]
		y ^= y << 5;
 8000178:	4b04      	ldr	r3, [pc, #16]	; (800018c <tarea_random+0x3c>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	015a      	lsls	r2, r3, #5
 800017e:	4b03      	ldr	r3, [pc, #12]	; (800018c <tarea_random+0x3c>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4053      	eors	r3, r2
 8000184:	4a01      	ldr	r2, [pc, #4]	; (800018c <tarea_random+0x3c>)
 8000186:	6013      	str	r3, [r2, #0]
	{
 8000188:	e7e6      	b.n	8000158 <tarea_random+0x8>
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 f987 	bl	80004a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f823 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f867 	bl	8000270 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001a2:	f001 f913 	bl	80013cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001a6:	4a0a      	ldr	r2, [pc, #40]	; (80001d0 <main+0x40>)
 80001a8:	2100      	movs	r1, #0
 80001aa:	480a      	ldr	r0, [pc, #40]	; (80001d4 <main+0x44>)
 80001ac:	f001 f974 	bl	8001498 <osThreadNew>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4a09      	ldr	r2, [pc, #36]	; (80001d8 <main+0x48>)
 80001b4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  xTaskCreate( tarea_random,
 80001b6:	2300      	movs	r3, #0
 80001b8:	9301      	str	r3, [sp, #4]
 80001ba:	2300      	movs	r3, #0
 80001bc:	9300      	str	r3, [sp, #0]
 80001be:	2300      	movs	r3, #0
 80001c0:	2280      	movs	r2, #128	; 0x80
 80001c2:	4906      	ldr	r1, [pc, #24]	; (80001dc <main+0x4c>)
 80001c4:	4806      	ldr	r0, [pc, #24]	; (80001e0 <main+0x50>)
 80001c6:	f002 f865 	bl	8002294 <xTaskCreate>
		  NULL,
		  tskIDLE_PRIORITY,
		  NULL);

  /* Start scheduler */
  osKernelStart();
 80001ca:	f001 f931 	bl	8001430 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ce:	e7fe      	b.n	80001ce <main+0x3e>
 80001d0:	08003e6c 	.word	0x08003e6c
 80001d4:	080002b5 	.word	0x080002b5
 80001d8:	20001f18 	.word	0x20001f18
 80001dc:	08003e34 	.word	0x08003e34
 80001e0:	08000151 	.word	0x08000151

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b090      	sub	sp, #64	; 0x40
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	2228      	movs	r2, #40	; 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f003 fe04 	bl	8003e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000206:	2301      	movs	r3, #1
 8000208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800020a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000214:	2301      	movs	r3, #1
 8000216:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000218:	2302      	movs	r3, #2
 800021a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000222:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000226:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000228:	f107 0318 	add.w	r3, r7, #24
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fa4d 	bl	80006cc <HAL_RCC_OscConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000238:	f000 f856 	bl	80002e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023c:	230f      	movs	r3, #15
 800023e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000240:	2302      	movs	r3, #2
 8000242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2102      	movs	r1, #2
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fcb8 	bl	8000bcc <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000262:	f000 f841 	bl	80002e8 <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3740      	adds	r7, #64	; 0x40
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <MX_GPIO_Init+0x40>)
 800027c:	f043 0320 	orr.w	r3, r3, #32
 8000280:	6193      	str	r3, [r2, #24]
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	f003 0320 	and.w	r3, r3, #32
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <MX_GPIO_Init+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0304 	and.w	r3, r3, #4
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]

}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40021000 	.word	0x40021000

080002b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002bc:	2001      	movs	r0, #1
 80002be:	f001 f997 	bl	80015f0 <osDelay>
 80002c2:	e7fb      	b.n	80002bc <StartDefaultTask+0x8>

080002c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d101      	bne.n	80002da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80002d6:	f000 f8fd 	bl	80004d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40012c00 	.word	0x40012c00

080002e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ec:	b672      	cpsid	i
}
 80002ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f0:	e7fe      	b.n	80002f0 <Error_Handler+0x8>
	...

080002f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002fa:	4b18      	ldr	r3, [pc, #96]	; (800035c <HAL_MspInit+0x68>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	4a17      	ldr	r2, [pc, #92]	; (800035c <HAL_MspInit+0x68>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6193      	str	r3, [r2, #24]
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <HAL_MspInit+0x68>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	60bb      	str	r3, [r7, #8]
 8000310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <HAL_MspInit+0x68>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	4a11      	ldr	r2, [pc, #68]	; (800035c <HAL_MspInit+0x68>)
 8000318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800031c:	61d3      	str	r3, [r2, #28]
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <HAL_MspInit+0x68>)
 8000320:	69db      	ldr	r3, [r3, #28]
 8000322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	210f      	movs	r1, #15
 800032e:	f06f 0001 	mvn.w	r0, #1
 8000332:	f000 f9a0 	bl	8000676 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000336:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <HAL_MspInit+0x6c>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <HAL_MspInit+0x6c>)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000
 8000360:	40010000 	.word	0x40010000

08000364 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b08c      	sub	sp, #48	; 0x30
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000374:	2200      	movs	r2, #0
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	2019      	movs	r0, #25
 800037a:	f000 f97c 	bl	8000676 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800037e:	2019      	movs	r0, #25
 8000380:	f000 f995 	bl	80006ae <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <HAL_InitTick+0x9c>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a1d      	ldr	r2, [pc, #116]	; (8000400 <HAL_InitTick+0x9c>)
 800038a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <HAL_InitTick+0x9c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800039c:	f107 0210 	add.w	r2, r7, #16
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fd78 	bl	8000e9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80003ac:	f000 fd62 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
 80003b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003b4:	4a13      	ldr	r2, [pc, #76]	; (8000404 <HAL_InitTick+0xa0>)
 80003b6:	fba2 2303 	umull	r2, r3, r2, r3
 80003ba:	0c9b      	lsrs	r3, r3, #18
 80003bc:	3b01      	subs	r3, #1
 80003be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <HAL_InitTick+0xa4>)
 80003c2:	4a12      	ldr	r2, [pc, #72]	; (800040c <HAL_InitTick+0xa8>)
 80003c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <HAL_InitTick+0xa4>)
 80003c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80003ce:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <HAL_InitTick+0xa4>)
 80003d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <HAL_InitTick+0xa4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <HAL_InitTick+0xa4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80003e0:	4809      	ldr	r0, [pc, #36]	; (8000408 <HAL_InitTick+0xa4>)
 80003e2:	f000 fda9 	bl	8000f38 <HAL_TIM_Base_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d104      	bne.n	80003f6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80003ec:	4806      	ldr	r0, [pc, #24]	; (8000408 <HAL_InitTick+0xa4>)
 80003ee:	f000 fdfb 	bl	8000fe8 <HAL_TIM_Base_Start_IT>
 80003f2:	4603      	mov	r3, r0
 80003f4:	e000      	b.n	80003f8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3730      	adds	r7, #48	; 0x30
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000
 8000404:	431bde83 	.word	0x431bde83
 8000408:	20001f1c 	.word	0x20001f1c
 800040c:	40012c00 	.word	0x40012c00

08000410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <NMI_Handler+0x4>

08000416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800041a:	e7fe      	b.n	800041a <HardFault_Handler+0x4>

0800041c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <MemManage_Handler+0x4>

08000422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <BusFault_Handler+0x4>

08000428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <UsageFault_Handler+0x4>

0800042e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
	...

0800043c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <TIM1_UP_IRQHandler+0x10>)
 8000442:	f000 fe23 	bl	800108c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20001f1c 	.word	0x20001f1c

08000450 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800045c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800045e:	e003      	b.n	8000468 <LoopCopyDataInit>

08000460 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000462:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000464:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000466:	3104      	adds	r1, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000468:	480a      	ldr	r0, [pc, #40]	; (8000494 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800046c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800046e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000470:	d3f6      	bcc.n	8000460 <CopyDataInit>
  ldr r2, =_sbss
 8000472:	4a0a      	ldr	r2, [pc, #40]	; (800049c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000474:	e002      	b.n	800047c <LoopFillZerobss>

08000476 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000478:	f842 3b04 	str.w	r3, [r2], #4

0800047c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800047e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000480:	d3f9      	bcc.n	8000476 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000482:	f7ff ffe5 	bl	8000450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000486:	f003 fc89 	bl	8003d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048a:	f7ff fe81 	bl	8000190 <main>
  bx lr
 800048e:	4770      	bx	lr
  ldr r3, =_sidata
 8000490:	08003eb0 	.word	0x08003eb0
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000498:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 800049c:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80004a0:	20001fa8 	.word	0x20001fa8

080004a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC1_2_IRQHandler>
	...

080004a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_Init+0x28>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a07      	ldr	r2, [pc, #28]	; (80004d0 <HAL_Init+0x28>)
 80004b2:	f043 0310 	orr.w	r3, r3, #16
 80004b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b8:	2003      	movs	r0, #3
 80004ba:	f000 f8d1 	bl	8000660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff ff50 	bl	8000364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004c4:	f7ff ff16 	bl	80002f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40022000 	.word	0x40022000

080004d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <HAL_IncTick+0x1c>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_IncTick+0x20>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4413      	add	r3, r2
 80004e4:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <HAL_IncTick+0x20>)
 80004e6:	6013      	str	r3, [r2, #0]
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	2000000c 	.word	0x2000000c
 80004f4:	20001f64 	.word	0x20001f64

080004f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  return uwTick;
 80004fc:	4b02      	ldr	r3, [pc, #8]	; (8000508 <HAL_GetTick+0x10>)
 80004fe:	681b      	ldr	r3, [r3, #0]
}
 8000500:	4618      	mov	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	20001f64 	.word	0x20001f64

0800050c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <__NVIC_SetPriorityGrouping+0x44>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000528:	4013      	ands	r3, r2
 800052a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800053e:	4a04      	ldr	r2, [pc, #16]	; (8000550 <__NVIC_SetPriorityGrouping+0x44>)
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	60d3      	str	r3, [r2, #12]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <__NVIC_GetPriorityGrouping+0x18>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	f003 0307 	and.w	r3, r3, #7
}
 8000562:	4618      	mov	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	2b00      	cmp	r3, #0
 8000580:	db0b      	blt.n	800059a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f003 021f 	and.w	r2, r3, #31
 8000588:	4906      	ldr	r1, [pc, #24]	; (80005a4 <__NVIC_EnableIRQ+0x34>)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	095b      	lsrs	r3, r3, #5
 8000590:	2001      	movs	r0, #1
 8000592:	fa00 f202 	lsl.w	r2, r0, r2
 8000596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	e000e100 	.word	0xe000e100

080005a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db0a      	blt.n	80005d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	490c      	ldr	r1, [pc, #48]	; (80005f4 <__NVIC_SetPriority+0x4c>)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	0112      	lsls	r2, r2, #4
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	440b      	add	r3, r1
 80005cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d0:	e00a      	b.n	80005e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4908      	ldr	r1, [pc, #32]	; (80005f8 <__NVIC_SetPriority+0x50>)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	f003 030f 	and.w	r3, r3, #15
 80005de:	3b04      	subs	r3, #4
 80005e0:	0112      	lsls	r2, r2, #4
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	440b      	add	r3, r1
 80005e6:	761a      	strb	r2, [r3, #24]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000e100 	.word	0xe000e100
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b089      	sub	sp, #36	; 0x24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	f1c3 0307 	rsb	r3, r3, #7
 8000616:	2b04      	cmp	r3, #4
 8000618:	bf28      	it	cs
 800061a:	2304      	movcs	r3, #4
 800061c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3304      	adds	r3, #4
 8000622:	2b06      	cmp	r3, #6
 8000624:	d902      	bls.n	800062c <NVIC_EncodePriority+0x30>
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	3b03      	subs	r3, #3
 800062a:	e000      	b.n	800062e <NVIC_EncodePriority+0x32>
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000630:	f04f 32ff 	mov.w	r2, #4294967295
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	43da      	mvns	r2, r3
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	401a      	ands	r2, r3
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000644:	f04f 31ff 	mov.w	r1, #4294967295
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	43d9      	mvns	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	4313      	orrs	r3, r2
         );
}
 8000656:	4618      	mov	r0, r3
 8000658:	3724      	adds	r7, #36	; 0x24
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff4f 	bl	800050c <__NVIC_SetPriorityGrouping>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000688:	f7ff ff64 	bl	8000554 <__NVIC_GetPriorityGrouping>
 800068c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	68b9      	ldr	r1, [r7, #8]
 8000692:	6978      	ldr	r0, [r7, #20]
 8000694:	f7ff ffb2 	bl	80005fc <NVIC_EncodePriority>
 8000698:	4602      	mov	r2, r0
 800069a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069e:	4611      	mov	r1, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff81 	bl	80005a8 <__NVIC_SetPriority>
}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	4603      	mov	r3, r0
 80006b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff57 	bl	8000570 <__NVIC_EnableIRQ>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d101      	bne.n	80006de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
 80006dc:	e26c      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	f000 8087 	beq.w	80007fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80006ec:	4b92      	ldr	r3, [pc, #584]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f003 030c 	and.w	r3, r3, #12
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d00c      	beq.n	8000712 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006f8:	4b8f      	ldr	r3, [pc, #572]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	f003 030c 	and.w	r3, r3, #12
 8000700:	2b08      	cmp	r3, #8
 8000702:	d112      	bne.n	800072a <HAL_RCC_OscConfig+0x5e>
 8000704:	4b8c      	ldr	r3, [pc, #560]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800070c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000710:	d10b      	bne.n	800072a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000712:	4b89      	ldr	r3, [pc, #548]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d06c      	beq.n	80007f8 <HAL_RCC_OscConfig+0x12c>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d168      	bne.n	80007f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e246      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000732:	d106      	bne.n	8000742 <HAL_RCC_OscConfig+0x76>
 8000734:	4b80      	ldr	r3, [pc, #512]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a7f      	ldr	r2, [pc, #508]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 800073a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	e02e      	b.n	80007a0 <HAL_RCC_OscConfig+0xd4>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d10c      	bne.n	8000764 <HAL_RCC_OscConfig+0x98>
 800074a:	4b7b      	ldr	r3, [pc, #492]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a7a      	ldr	r2, [pc, #488]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	4b78      	ldr	r3, [pc, #480]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a77      	ldr	r2, [pc, #476]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 800075c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	e01d      	b.n	80007a0 <HAL_RCC_OscConfig+0xd4>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800076c:	d10c      	bne.n	8000788 <HAL_RCC_OscConfig+0xbc>
 800076e:	4b72      	ldr	r3, [pc, #456]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a71      	ldr	r2, [pc, #452]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	4b6f      	ldr	r3, [pc, #444]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a6e      	ldr	r2, [pc, #440]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	e00b      	b.n	80007a0 <HAL_RCC_OscConfig+0xd4>
 8000788:	4b6b      	ldr	r3, [pc, #428]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a6a      	ldr	r2, [pc, #424]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 800078e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b68      	ldr	r3, [pc, #416]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a67      	ldr	r2, [pc, #412]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 800079a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800079e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d013      	beq.n	80007d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007a8:	f7ff fea6 	bl	80004f8 <HAL_GetTick>
 80007ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007ae:	e008      	b.n	80007c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007b0:	f7ff fea2 	bl	80004f8 <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	2b64      	cmp	r3, #100	; 0x64
 80007bc:	d901      	bls.n	80007c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80007be:	2303      	movs	r3, #3
 80007c0:	e1fa      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007c2:	4b5d      	ldr	r3, [pc, #372]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f0      	beq.n	80007b0 <HAL_RCC_OscConfig+0xe4>
 80007ce:	e014      	b.n	80007fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007d0:	f7ff fe92 	bl	80004f8 <HAL_GetTick>
 80007d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007d6:	e008      	b.n	80007ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007d8:	f7ff fe8e 	bl	80004f8 <HAL_GetTick>
 80007dc:	4602      	mov	r2, r0
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	2b64      	cmp	r3, #100	; 0x64
 80007e4:	d901      	bls.n	80007ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80007e6:	2303      	movs	r3, #3
 80007e8:	e1e6      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007ea:	4b53      	ldr	r3, [pc, #332]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f0      	bne.n	80007d8 <HAL_RCC_OscConfig+0x10c>
 80007f6:	e000      	b.n	80007fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d063      	beq.n	80008ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000806:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f003 030c 	and.w	r3, r3, #12
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00b      	beq.n	800082a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000812:	4b49      	ldr	r3, [pc, #292]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	f003 030c 	and.w	r3, r3, #12
 800081a:	2b08      	cmp	r3, #8
 800081c:	d11c      	bne.n	8000858 <HAL_RCC_OscConfig+0x18c>
 800081e:	4b46      	ldr	r3, [pc, #280]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d116      	bne.n	8000858 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800082a:	4b43      	ldr	r3, [pc, #268]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	2b00      	cmp	r3, #0
 8000834:	d005      	beq.n	8000842 <HAL_RCC_OscConfig+0x176>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d001      	beq.n	8000842 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e1ba      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	4939      	ldr	r1, [pc, #228]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000852:	4313      	orrs	r3, r2
 8000854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000856:	e03a      	b.n	80008ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d020      	beq.n	80008a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000860:	4b36      	ldr	r3, [pc, #216]	; (800093c <HAL_RCC_OscConfig+0x270>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000866:	f7ff fe47 	bl	80004f8 <HAL_GetTick>
 800086a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800086c:	e008      	b.n	8000880 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800086e:	f7ff fe43 	bl	80004f8 <HAL_GetTick>
 8000872:	4602      	mov	r2, r0
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	2b02      	cmp	r3, #2
 800087a:	d901      	bls.n	8000880 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800087c:	2303      	movs	r3, #3
 800087e:	e19b      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000880:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f003 0302 	and.w	r3, r3, #2
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0f0      	beq.n	800086e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800088c:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	4927      	ldr	r1, [pc, #156]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 800089c:	4313      	orrs	r3, r2
 800089e:	600b      	str	r3, [r1, #0]
 80008a0:	e015      	b.n	80008ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <HAL_RCC_OscConfig+0x270>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a8:	f7ff fe26 	bl	80004f8 <HAL_GetTick>
 80008ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008ae:	e008      	b.n	80008c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008b0:	f7ff fe22 	bl	80004f8 <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d901      	bls.n	80008c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80008be:	2303      	movs	r3, #3
 80008c0:	e17a      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f0      	bne.n	80008b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d03a      	beq.n	8000950 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d019      	beq.n	8000916 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <HAL_RCC_OscConfig+0x274>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008e8:	f7ff fe06 	bl	80004f8 <HAL_GetTick>
 80008ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008ee:	e008      	b.n	8000902 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008f0:	f7ff fe02 	bl	80004f8 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d901      	bls.n	8000902 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80008fe:	2303      	movs	r3, #3
 8000900:	e15a      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_RCC_OscConfig+0x26c>)
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0f0      	beq.n	80008f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800090e:	2001      	movs	r0, #1
 8000910:	f000 faf4 	bl	8000efc <RCC_Delay>
 8000914:	e01c      	b.n	8000950 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_RCC_OscConfig+0x274>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800091c:	f7ff fdec 	bl	80004f8 <HAL_GetTick>
 8000920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000922:	e00f      	b.n	8000944 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000924:	f7ff fde8 	bl	80004f8 <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b02      	cmp	r3, #2
 8000930:	d908      	bls.n	8000944 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e140      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	42420000 	.word	0x42420000
 8000940:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000944:	4b9e      	ldr	r3, [pc, #632]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000948:	f003 0302 	and.w	r3, r3, #2
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1e9      	bne.n	8000924 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	2b00      	cmp	r3, #0
 800095a:	f000 80a6 	beq.w	8000aaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000962:	4b97      	ldr	r3, [pc, #604]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	2b00      	cmp	r3, #0
 800096c:	d10d      	bne.n	800098a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b94      	ldr	r3, [pc, #592]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a93      	ldr	r2, [pc, #588]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b91      	ldr	r3, [pc, #580]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000986:	2301      	movs	r3, #1
 8000988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800098a:	4b8e      	ldr	r3, [pc, #568]	; (8000bc4 <HAL_RCC_OscConfig+0x4f8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000992:	2b00      	cmp	r3, #0
 8000994:	d118      	bne.n	80009c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000996:	4b8b      	ldr	r3, [pc, #556]	; (8000bc4 <HAL_RCC_OscConfig+0x4f8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a8a      	ldr	r2, [pc, #552]	; (8000bc4 <HAL_RCC_OscConfig+0x4f8>)
 800099c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009a2:	f7ff fda9 	bl	80004f8 <HAL_GetTick>
 80009a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009a8:	e008      	b.n	80009bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009aa:	f7ff fda5 	bl	80004f8 <HAL_GetTick>
 80009ae:	4602      	mov	r2, r0
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	2b64      	cmp	r3, #100	; 0x64
 80009b6:	d901      	bls.n	80009bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80009b8:	2303      	movs	r3, #3
 80009ba:	e0fd      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009bc:	4b81      	ldr	r3, [pc, #516]	; (8000bc4 <HAL_RCC_OscConfig+0x4f8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0f0      	beq.n	80009aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d106      	bne.n	80009de <HAL_RCC_OscConfig+0x312>
 80009d0:	4b7b      	ldr	r3, [pc, #492]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 80009d2:	6a1b      	ldr	r3, [r3, #32]
 80009d4:	4a7a      	ldr	r2, [pc, #488]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6213      	str	r3, [r2, #32]
 80009dc:	e02d      	b.n	8000a3a <HAL_RCC_OscConfig+0x36e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10c      	bne.n	8000a00 <HAL_RCC_OscConfig+0x334>
 80009e6:	4b76      	ldr	r3, [pc, #472]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 80009e8:	6a1b      	ldr	r3, [r3, #32]
 80009ea:	4a75      	ldr	r2, [pc, #468]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 80009ec:	f023 0301 	bic.w	r3, r3, #1
 80009f0:	6213      	str	r3, [r2, #32]
 80009f2:	4b73      	ldr	r3, [pc, #460]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 80009f4:	6a1b      	ldr	r3, [r3, #32]
 80009f6:	4a72      	ldr	r2, [pc, #456]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 80009f8:	f023 0304 	bic.w	r3, r3, #4
 80009fc:	6213      	str	r3, [r2, #32]
 80009fe:	e01c      	b.n	8000a3a <HAL_RCC_OscConfig+0x36e>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	2b05      	cmp	r3, #5
 8000a06:	d10c      	bne.n	8000a22 <HAL_RCC_OscConfig+0x356>
 8000a08:	4b6d      	ldr	r3, [pc, #436]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a0a:	6a1b      	ldr	r3, [r3, #32]
 8000a0c:	4a6c      	ldr	r2, [pc, #432]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	6213      	str	r3, [r2, #32]
 8000a14:	4b6a      	ldr	r3, [pc, #424]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a16:	6a1b      	ldr	r3, [r3, #32]
 8000a18:	4a69      	ldr	r2, [pc, #420]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6213      	str	r3, [r2, #32]
 8000a20:	e00b      	b.n	8000a3a <HAL_RCC_OscConfig+0x36e>
 8000a22:	4b67      	ldr	r3, [pc, #412]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a24:	6a1b      	ldr	r3, [r3, #32]
 8000a26:	4a66      	ldr	r2, [pc, #408]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a28:	f023 0301 	bic.w	r3, r3, #1
 8000a2c:	6213      	str	r3, [r2, #32]
 8000a2e:	4b64      	ldr	r3, [pc, #400]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a30:	6a1b      	ldr	r3, [r3, #32]
 8000a32:	4a63      	ldr	r2, [pc, #396]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a34:	f023 0304 	bic.w	r3, r3, #4
 8000a38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d015      	beq.n	8000a6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a42:	f7ff fd59 	bl	80004f8 <HAL_GetTick>
 8000a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a48:	e00a      	b.n	8000a60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a4a:	f7ff fd55 	bl	80004f8 <HAL_GetTick>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d901      	bls.n	8000a60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e0ab      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a60:	4b57      	ldr	r3, [pc, #348]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a62:	6a1b      	ldr	r3, [r3, #32]
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0ee      	beq.n	8000a4a <HAL_RCC_OscConfig+0x37e>
 8000a6c:	e014      	b.n	8000a98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a6e:	f7ff fd43 	bl	80004f8 <HAL_GetTick>
 8000a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a74:	e00a      	b.n	8000a8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a76:	f7ff fd3f 	bl	80004f8 <HAL_GetTick>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d901      	bls.n	8000a8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	e095      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a8c:	4b4c      	ldr	r3, [pc, #304]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a8e:	6a1b      	ldr	r3, [r3, #32]
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1ee      	bne.n	8000a76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d105      	bne.n	8000aaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a9e:	4b48      	ldr	r3, [pc, #288]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a47      	ldr	r2, [pc, #284]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 8081 	beq.w	8000bb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ab4:	4b42      	ldr	r3, [pc, #264]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 030c 	and.w	r3, r3, #12
 8000abc:	2b08      	cmp	r3, #8
 8000abe:	d061      	beq.n	8000b84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d146      	bne.n	8000b56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ac8:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <HAL_RCC_OscConfig+0x4fc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ace:	f7ff fd13 	bl	80004f8 <HAL_GetTick>
 8000ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ad4:	e008      	b.n	8000ae8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ad6:	f7ff fd0f 	bl	80004f8 <HAL_GetTick>
 8000ada:	4602      	mov	r2, r0
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d901      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e067      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ae8:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f0      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a1b      	ldr	r3, [r3, #32]
 8000af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000afc:	d108      	bne.n	8000b10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000afe:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	492d      	ldr	r1, [pc, #180]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b10:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6a19      	ldr	r1, [r3, #32]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b20:	430b      	orrs	r3, r1
 8000b22:	4927      	ldr	r1, [pc, #156]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <HAL_RCC_OscConfig+0x4fc>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b2e:	f7ff fce3 	bl	80004f8 <HAL_GetTick>
 8000b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b34:	e008      	b.n	8000b48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b36:	f7ff fcdf 	bl	80004f8 <HAL_GetTick>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d901      	bls.n	8000b48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000b44:	2303      	movs	r3, #3
 8000b46:	e037      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f0      	beq.n	8000b36 <HAL_RCC_OscConfig+0x46a>
 8000b54:	e02f      	b.n	8000bb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_RCC_OscConfig+0x4fc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5c:	f7ff fccc 	bl	80004f8 <HAL_GetTick>
 8000b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b62:	e008      	b.n	8000b76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b64:	f7ff fcc8 	bl	80004f8 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d901      	bls.n	8000b76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e020      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1f0      	bne.n	8000b64 <HAL_RCC_OscConfig+0x498>
 8000b82:	e018      	b.n	8000bb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d101      	bne.n	8000b90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e013      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d106      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d001      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40007000 	.word	0x40007000
 8000bc8:	42420060 	.word	0x42420060

08000bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d101      	bne.n	8000be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e0d0      	b.n	8000d82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000be0:	4b6a      	ldr	r3, [pc, #424]	; (8000d8c <HAL_RCC_ClockConfig+0x1c0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0307 	and.w	r3, r3, #7
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d910      	bls.n	8000c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bee:	4b67      	ldr	r3, [pc, #412]	; (8000d8c <HAL_RCC_ClockConfig+0x1c0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f023 0207 	bic.w	r2, r3, #7
 8000bf6:	4965      	ldr	r1, [pc, #404]	; (8000d8c <HAL_RCC_ClockConfig+0x1c0>)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bfe:	4b63      	ldr	r3, [pc, #396]	; (8000d8c <HAL_RCC_ClockConfig+0x1c0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d001      	beq.n	8000c10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e0b8      	b.n	8000d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d020      	beq.n	8000c5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c28:	4b59      	ldr	r3, [pc, #356]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a58      	ldr	r2, [pc, #352]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c40:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4a52      	ldr	r2, [pc, #328]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000c46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c4c:	4b50      	ldr	r3, [pc, #320]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	494d      	ldr	r1, [pc, #308]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d040      	beq.n	8000cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d107      	bne.n	8000c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	4b47      	ldr	r3, [pc, #284]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d115      	bne.n	8000caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e07f      	b.n	8000d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d107      	bne.n	8000c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c8a:	4b41      	ldr	r3, [pc, #260]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d109      	bne.n	8000caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e073      	b.n	8000d82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9a:	4b3d      	ldr	r3, [pc, #244]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e06b      	b.n	8000d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000caa:	4b39      	ldr	r3, [pc, #228]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f023 0203 	bic.w	r2, r3, #3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	4936      	ldr	r1, [pc, #216]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cbc:	f7ff fc1c 	bl	80004f8 <HAL_GetTick>
 8000cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cc2:	e00a      	b.n	8000cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc4:	f7ff fc18 	bl	80004f8 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e053      	b.n	8000d82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 020c 	and.w	r2, r3, #12
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d1eb      	bne.n	8000cc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000cec:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <HAL_RCC_ClockConfig+0x1c0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d210      	bcs.n	8000d1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cfa:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <HAL_RCC_ClockConfig+0x1c0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 0207 	bic.w	r2, r3, #7
 8000d02:	4922      	ldr	r1, [pc, #136]	; (8000d8c <HAL_RCC_ClockConfig+0x1c0>)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <HAL_RCC_ClockConfig+0x1c0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d001      	beq.n	8000d1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e032      	b.n	8000d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d008      	beq.n	8000d3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	4916      	ldr	r1, [pc, #88]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d36:	4313      	orrs	r3, r2
 8000d38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d009      	beq.n	8000d5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	490e      	ldr	r1, [pc, #56]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d5a:	f000 f821 	bl	8000da0 <HAL_RCC_GetSysClockFreq>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	490a      	ldr	r1, [pc, #40]	; (8000d94 <HAL_RCC_ClockConfig+0x1c8>)
 8000d6c:	5ccb      	ldrb	r3, [r1, r3]
 8000d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <HAL_RCC_ClockConfig+0x1cc>)
 8000d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_RCC_ClockConfig+0x1d0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff faf2 	bl	8000364 <HAL_InitTick>

  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40022000 	.word	0x40022000
 8000d90:	40021000 	.word	0x40021000
 8000d94:	08003e90 	.word	0x08003e90
 8000d98:	20000004 	.word	0x20000004
 8000d9c:	20000008 	.word	0x20000008

08000da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000da0:	b490      	push	{r4, r7}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000da8:	1d3c      	adds	r4, r7, #4
 8000daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000db0:	f240 2301 	movw	r3, #513	; 0x201
 8000db4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d002      	beq.n	8000de0 <HAL_RCC_GetSysClockFreq+0x40>
 8000dda:	2b08      	cmp	r3, #8
 8000ddc:	d003      	beq.n	8000de6 <HAL_RCC_GetSysClockFreq+0x46>
 8000dde:	e02d      	b.n	8000e3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000de2:	623b      	str	r3, [r7, #32]
      break;
 8000de4:	e02d      	b.n	8000e42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	0c9b      	lsrs	r3, r3, #18
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000df2:	4413      	add	r3, r2
 8000df4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000df8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d013      	beq.n	8000e2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	0c5b      	lsrs	r3, r3, #17
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e12:	4413      	add	r3, r2
 8000e14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e1e:	fb02 f203 	mul.w	r2, r2, r3
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
 8000e2a:	e004      	b.n	8000e36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	623b      	str	r3, [r7, #32]
      break;
 8000e3a:	e002      	b.n	8000e42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e3e:	623b      	str	r3, [r7, #32]
      break;
 8000e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e42:	6a3b      	ldr	r3, [r7, #32]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc90      	pop	{r4, r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	08003e44 	.word	0x08003e44
 8000e54:	40021000 	.word	0x40021000
 8000e58:	007a1200 	.word	0x007a1200
 8000e5c:	003d0900 	.word	0x003d0900

08000e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e78:	f7ff fff2 	bl	8000e60 <HAL_RCC_GetHCLKFreq>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	0adb      	lsrs	r3, r3, #11
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	4903      	ldr	r1, [pc, #12]	; (8000e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e8a:	5ccb      	ldrb	r3, [r1, r3]
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	08003ea0 	.word	0x08003ea0

08000e9c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_RCC_GetClockConfig+0x58>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0203 	and.w	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_RCC_GetClockConfig+0x58>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_RCC_GetClockConfig+0x58>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_RCC_GetClockConfig+0x58>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0207 	and.w	r2, r3, #7
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40022000 	.word	0x40022000

08000efc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <RCC_Delay+0x34>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <RCC_Delay+0x38>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	0a5b      	lsrs	r3, r3, #9
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f18:	bf00      	nop
  }
  while (Delay --);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	1e5a      	subs	r2, r3, #1
 8000f1e:	60fa      	str	r2, [r7, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f9      	bne.n	8000f18 <RCC_Delay+0x1c>
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000004 	.word	0x20000004
 8000f34:	10624dd3 	.word	0x10624dd3

08000f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e041      	b.n	8000fce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d106      	bne.n	8000f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f839 	bl	8000fd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2202      	movs	r2, #2
 8000f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3304      	adds	r3, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4610      	mov	r0, r2
 8000f78:	f000 f9b4 	bl	80012e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d001      	beq.n	8001000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e03a      	b.n	8001076 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2202      	movs	r2, #2
 8001004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0201 	orr.w	r2, r2, #1
 8001016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a18      	ldr	r2, [pc, #96]	; (8001080 <HAL_TIM_Base_Start_IT+0x98>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00e      	beq.n	8001040 <HAL_TIM_Base_Start_IT+0x58>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800102a:	d009      	beq.n	8001040 <HAL_TIM_Base_Start_IT+0x58>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <HAL_TIM_Base_Start_IT+0x9c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d004      	beq.n	8001040 <HAL_TIM_Base_Start_IT+0x58>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <HAL_TIM_Base_Start_IT+0xa0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d111      	bne.n	8001064 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b06      	cmp	r3, #6
 8001050:	d010      	beq.n	8001074 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 0201 	orr.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001062:	e007      	b.n	8001074 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	40012c00 	.word	0x40012c00
 8001084:	40000400 	.word	0x40000400
 8001088:	40000800 	.word	0x40000800

0800108c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d122      	bne.n	80010e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d11b      	bne.n	80010e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f06f 0202 	mvn.w	r2, #2
 80010b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f8ed 	bl	80012ae <HAL_TIM_IC_CaptureCallback>
 80010d4:	e005      	b.n	80010e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f8e0 	bl	800129c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f8ef 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d122      	bne.n	800113c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b04      	cmp	r3, #4
 8001102:	d11b      	bne.n	800113c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f06f 0204 	mvn.w	r2, #4
 800110c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2202      	movs	r2, #2
 8001112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f8c3 	bl	80012ae <HAL_TIM_IC_CaptureCallback>
 8001128:	e005      	b.n	8001136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f8b6 	bl	800129c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f8c5 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b08      	cmp	r3, #8
 8001148:	d122      	bne.n	8001190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b08      	cmp	r3, #8
 8001156:	d11b      	bne.n	8001190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f06f 0208 	mvn.w	r2, #8
 8001160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2204      	movs	r2, #4
 8001166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f899 	bl	80012ae <HAL_TIM_IC_CaptureCallback>
 800117c:	e005      	b.n	800118a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f88c 	bl	800129c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f89b 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	2b10      	cmp	r3, #16
 800119c:	d122      	bne.n	80011e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b10      	cmp	r3, #16
 80011aa:	d11b      	bne.n	80011e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f06f 0210 	mvn.w	r2, #16
 80011b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2208      	movs	r2, #8
 80011ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f86f 	bl	80012ae <HAL_TIM_IC_CaptureCallback>
 80011d0:	e005      	b.n	80011de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f862 	bl	800129c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f871 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d10e      	bne.n	8001210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d107      	bne.n	8001210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f06f 0201 	mvn.w	r2, #1
 8001208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff f85a 	bl	80002c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	2b80      	cmp	r3, #128	; 0x80
 800121c:	d10e      	bne.n	800123c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001228:	2b80      	cmp	r3, #128	; 0x80
 800122a:	d107      	bne.n	800123c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f8bf 	bl	80013ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001246:	2b40      	cmp	r3, #64	; 0x40
 8001248:	d10e      	bne.n	8001268 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001254:	2b40      	cmp	r3, #64	; 0x40
 8001256:	d107      	bne.n	8001268 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f835 	bl	80012d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	2b20      	cmp	r3, #32
 8001274:	d10e      	bne.n	8001294 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f003 0320 	and.w	r3, r3, #32
 8001280:	2b20      	cmp	r3, #32
 8001282:	d107      	bne.n	8001294 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f06f 0220 	mvn.w	r2, #32
 800128c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f88a 	bl	80013a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a29      	ldr	r2, [pc, #164]	; (800139c <TIM_Base_SetConfig+0xb8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d00b      	beq.n	8001314 <TIM_Base_SetConfig+0x30>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001302:	d007      	beq.n	8001314 <TIM_Base_SetConfig+0x30>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <TIM_Base_SetConfig+0xbc>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d003      	beq.n	8001314 <TIM_Base_SetConfig+0x30>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a25      	ldr	r2, [pc, #148]	; (80013a4 <TIM_Base_SetConfig+0xc0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d108      	bne.n	8001326 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800131a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1c      	ldr	r2, [pc, #112]	; (800139c <TIM_Base_SetConfig+0xb8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00b      	beq.n	8001346 <TIM_Base_SetConfig+0x62>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001334:	d007      	beq.n	8001346 <TIM_Base_SetConfig+0x62>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <TIM_Base_SetConfig+0xbc>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d003      	beq.n	8001346 <TIM_Base_SetConfig+0x62>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <TIM_Base_SetConfig+0xc0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d108      	bne.n	8001358 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800134c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4313      	orrs	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a07      	ldr	r2, [pc, #28]	; (800139c <TIM_Base_SetConfig+0xb8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d103      	bne.n	800138c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	615a      	str	r2, [r3, #20]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	40012c00 	.word	0x40012c00
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40000800 	.word	0x40000800

080013a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013d2:	f3ef 8305 	mrs	r3, IPSR
 80013d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80013d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10f      	bne.n	80013fe <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013de:	f3ef 8310 	mrs	r3, PRIMASK
 80013e2:	607b      	str	r3, [r7, #4]
  return(result);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <osKernelInitialize+0x32>
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <osKernelInitialize+0x60>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d109      	bne.n	8001406 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80013f2:	f3ef 8311 	mrs	r3, BASEPRI
 80013f6:	603b      	str	r3, [r7, #0]
  return(result);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80013fe:	f06f 0305 	mvn.w	r3, #5
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e00c      	b.n	8001420 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <osKernelInitialize+0x60>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d105      	bne.n	800141a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <osKernelInitialize+0x60>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e002      	b.n	8001420 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001420:	68fb      	ldr	r3, [r7, #12]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	20000030 	.word	0x20000030

08001430 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001436:	f3ef 8305 	mrs	r3, IPSR
 800143a:	60bb      	str	r3, [r7, #8]
  return(result);
 800143c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10f      	bne.n	8001462 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001442:	f3ef 8310 	mrs	r3, PRIMASK
 8001446:	607b      	str	r3, [r7, #4]
  return(result);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <osKernelStart+0x32>
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <osKernelStart+0x64>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d109      	bne.n	800146a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001456:	f3ef 8311 	mrs	r3, BASEPRI
 800145a:	603b      	str	r3, [r7, #0]
  return(result);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001462:	f06f 0305 	mvn.w	r3, #5
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e00e      	b.n	8001488 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <osKernelStart+0x64>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <osKernelStart+0x64>)
 8001474:	2202      	movs	r2, #2
 8001476:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001478:	f001 f880 	bl	800257c <vTaskStartScheduler>
      stat = osOK;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	e002      	b.n	8001488 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001488:	68fb      	ldr	r3, [r7, #12]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000030 	.word	0x20000030

08001498 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b092      	sub	sp, #72	; 0x48
 800149c:	af04      	add	r7, sp, #16
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014a8:	f3ef 8305 	mrs	r3, IPSR
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f040 8095 	bne.w	80015e0 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014b6:	f3ef 8310 	mrs	r3, PRIMASK
 80014ba:	623b      	str	r3, [r7, #32]
  return(result);
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 808e 	bne.w	80015e0 <osThreadNew+0x148>
 80014c4:	4b49      	ldr	r3, [pc, #292]	; (80015ec <osThreadNew+0x154>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d106      	bne.n	80014da <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80014cc:	f3ef 8311 	mrs	r3, BASEPRI
 80014d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f040 8083 	bne.w	80015e0 <osThreadNew+0x148>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d07f      	beq.n	80015e0 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80014e4:	2318      	movs	r3, #24
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80014e8:	2300      	movs	r3, #0
 80014ea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80014ec:	f107 031b 	add.w	r3, r7, #27
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d046      	beq.n	800158c <osThreadNew+0xf4>
      if (attr->name != NULL) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <osThreadNew+0x74>
        name = attr->name;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <osThreadNew+0x9a>
 8001520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001522:	2b38      	cmp	r3, #56	; 0x38
 8001524:	d805      	bhi.n	8001532 <osThreadNew+0x9a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <osThreadNew+0x9e>
        return (NULL);
 8001532:	2300      	movs	r3, #0
 8001534:	e055      	b.n	80015e2 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00f      	beq.n	800156e <osThreadNew+0xd6>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 8001556:	d30a      	bcc.n	800156e <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <osThreadNew+0xd6>
        mem = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
 800156c:	e010      	b.n	8001590 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10c      	bne.n	8001590 <osThreadNew+0xf8>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d108      	bne.n	8001590 <osThreadNew+0xf8>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d104      	bne.n	8001590 <osThreadNew+0xf8>
          mem = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
 800158a:	e001      	b.n	8001590 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	2b01      	cmp	r3, #1
 8001594:	d110      	bne.n	80015b8 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800159e:	9202      	str	r2, [sp, #8]
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 fe13 	bl	80021d8 <xTaskCreateStatic>
 80015b2:	4603      	mov	r3, r0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e013      	b.n	80015e0 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d110      	bne.n	80015e0 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80015be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 fe5f 	bl	8002294 <xTaskCreate>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d001      	beq.n	80015e0 <osThreadNew+0x148>
          hTask = NULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80015e0:	697b      	ldr	r3, [r7, #20]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3738      	adds	r7, #56	; 0x38
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000030 	.word	0x20000030

080015f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015f8:	f3ef 8305 	mrs	r3, IPSR
 80015fc:	613b      	str	r3, [r7, #16]
  return(result);
 80015fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10f      	bne.n	8001624 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001604:	f3ef 8310 	mrs	r3, PRIMASK
 8001608:	60fb      	str	r3, [r7, #12]
  return(result);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <osDelay+0x34>
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <osDelay+0x58>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d109      	bne.n	800162c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001618:	f3ef 8311 	mrs	r3, BASEPRI
 800161c:	60bb      	str	r3, [r7, #8]
  return(result);
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <osDelay+0x3c>
    stat = osErrorISR;
 8001624:	f06f 0305 	mvn.w	r3, #5
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e007      	b.n	800163c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 ff6c 	bl	8002514 <vTaskDelay>
    }
  }

  return (stat);
 800163c:	697b      	ldr	r3, [r7, #20]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000030 	.word	0x20000030

0800164c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4a06      	ldr	r2, [pc, #24]	; (8001674 <vApplicationGetIdleTaskMemory+0x28>)
 800165c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <vApplicationGetIdleTaskMemory+0x2c>)
 8001662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	601a      	str	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	20000034 	.word	0x20000034
 8001678:	20000180 	.word	0x20000180

0800167c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800168c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <vApplicationGetTimerTaskMemory+0x30>)
 8001692:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000380 	.word	0x20000380
 80016ac:	200004cc 	.word	0x200004cc

080016b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f103 0208 	add.w	r2, r3, #8
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f103 0208 	add.w	r2, r3, #8
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f103 0208 	add.w	r2, r3, #8
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001762:	d103      	bne.n	800176c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e00c      	b.n	8001786 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3308      	adds	r3, #8
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e002      	b.n	800177a <vListInsert+0x2e>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	429a      	cmp	r2, r3
 8001784:	d2f6      	bcs.n	8001774 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	601a      	str	r2, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6892      	ldr	r2, [r2, #8]
 80017d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6852      	ldr	r2, [r2, #4]
 80017dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d103      	bne.n	80017f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
	...

08001810 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10a      	bne.n	800183a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001828:	f383 8811 	msr	BASEPRI, r3
 800182c:	f3bf 8f6f 	isb	sy
 8001830:	f3bf 8f4f 	dsb	sy
 8001834:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001836:	bf00      	nop
 8001838:	e7fe      	b.n	8001838 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800183a:	f001 ffd7 	bl	80037ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	68f9      	ldr	r1, [r7, #12]
 8001848:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	441a      	add	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	3b01      	subs	r3, #1
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	441a      	add	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	22ff      	movs	r2, #255	; 0xff
 800187e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	22ff      	movs	r2, #255	; 0xff
 8001886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d114      	bne.n	80018ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d01a      	beq.n	80018ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3310      	adds	r3, #16
 800189c:	4618      	mov	r0, r3
 800189e:	f001 f8f7 	bl	8002a90 <xTaskRemoveFromEventList>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d012      	beq.n	80018ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <xQueueGenericReset+0xcc>)
 80018aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	f3bf 8f4f 	dsb	sy
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	e009      	b.n	80018ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3310      	adds	r3, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fef6 	bl	80016b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3324      	adds	r3, #36	; 0x24
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fef1 	bl	80016b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80018ce:	f001 ffbd 	bl	800384c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	e000ed04 	.word	0xe000ed04

080018e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08e      	sub	sp, #56	; 0x38
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10a      	bne.n	800190a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80018f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f8:	f383 8811 	msr	BASEPRI, r3
 80018fc:	f3bf 8f6f 	isb	sy
 8001900:	f3bf 8f4f 	dsb	sy
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001906:	bf00      	nop
 8001908:	e7fe      	b.n	8001908 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10a      	bne.n	8001926 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001914:	f383 8811 	msr	BASEPRI, r3
 8001918:	f3bf 8f6f 	isb	sy
 800191c:	f3bf 8f4f 	dsb	sy
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001922:	bf00      	nop
 8001924:	e7fe      	b.n	8001924 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <xQueueGenericCreateStatic+0x52>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <xQueueGenericCreateStatic+0x56>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <xQueueGenericCreateStatic+0x58>
 8001936:	2300      	movs	r3, #0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10a      	bne.n	8001952 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800193c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001940:	f383 8811 	msr	BASEPRI, r3
 8001944:	f3bf 8f6f 	isb	sy
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	623b      	str	r3, [r7, #32]
}
 800194e:	bf00      	nop
 8001950:	e7fe      	b.n	8001950 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <xQueueGenericCreateStatic+0x7e>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <xQueueGenericCreateStatic+0x82>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <xQueueGenericCreateStatic+0x84>
 8001962:	2300      	movs	r3, #0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10a      	bne.n	800197e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196c:	f383 8811 	msr	BASEPRI, r3
 8001970:	f3bf 8f6f 	isb	sy
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	61fb      	str	r3, [r7, #28]
}
 800197a:	bf00      	nop
 800197c:	e7fe      	b.n	800197c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800197e:	2350      	movs	r3, #80	; 0x50
 8001980:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b50      	cmp	r3, #80	; 0x50
 8001986:	d00a      	beq.n	800199e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198c:	f383 8811 	msr	BASEPRI, r3
 8001990:	f3bf 8f6f 	isb	sy
 8001994:	f3bf 8f4f 	dsb	sy
 8001998:	61bb      	str	r3, [r7, #24]
}
 800199a:	bf00      	nop
 800199c:	e7fe      	b.n	800199c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80019b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4613      	mov	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f805 	bl	80019ce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3730      	adds	r7, #48	; 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d103      	bne.n	80019ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e002      	b.n	80019f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80019fc:	2101      	movs	r1, #1
 80019fe:	69b8      	ldr	r0, [r7, #24]
 8001a00:	f7ff ff06 	bl	8001810 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	; 0x38
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <xQueueGenericSend+0x32>
	__asm volatile
 8001a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a34:	f383 8811 	msr	BASEPRI, r3
 8001a38:	f3bf 8f6f 	isb	sy
 8001a3c:	f3bf 8f4f 	dsb	sy
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001a42:	bf00      	nop
 8001a44:	e7fe      	b.n	8001a44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d103      	bne.n	8001a54 <xQueueGenericSend+0x40>
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <xQueueGenericSend+0x44>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <xQueueGenericSend+0x46>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10a      	bne.n	8001a74 <xQueueGenericSend+0x60>
	__asm volatile
 8001a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a62:	f383 8811 	msr	BASEPRI, r3
 8001a66:	f3bf 8f6f 	isb	sy
 8001a6a:	f3bf 8f4f 	dsb	sy
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001a70:	bf00      	nop
 8001a72:	e7fe      	b.n	8001a72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d103      	bne.n	8001a82 <xQueueGenericSend+0x6e>
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <xQueueGenericSend+0x72>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <xQueueGenericSend+0x74>
 8001a86:	2300      	movs	r3, #0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10a      	bne.n	8001aa2 <xQueueGenericSend+0x8e>
	__asm volatile
 8001a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a90:	f383 8811 	msr	BASEPRI, r3
 8001a94:	f3bf 8f6f 	isb	sy
 8001a98:	f3bf 8f4f 	dsb	sy
 8001a9c:	623b      	str	r3, [r7, #32]
}
 8001a9e:	bf00      	nop
 8001aa0:	e7fe      	b.n	8001aa0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001aa2:	f001 f9b7 	bl	8002e14 <xTaskGetSchedulerState>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <xQueueGenericSend+0x9e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <xQueueGenericSend+0xa2>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <xQueueGenericSend+0xa4>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10a      	bne.n	8001ad2 <xQueueGenericSend+0xbe>
	__asm volatile
 8001abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac0:	f383 8811 	msr	BASEPRI, r3
 8001ac4:	f3bf 8f6f 	isb	sy
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	61fb      	str	r3, [r7, #28]
}
 8001ace:	bf00      	nop
 8001ad0:	e7fe      	b.n	8001ad0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001ad2:	f001 fe8b 	bl	80037ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d302      	bcc.n	8001ae8 <xQueueGenericSend+0xd4>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d129      	bne.n	8001b3c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001aee:	f000 fa07 	bl	8001f00 <prvCopyDataToQueue>
 8001af2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d010      	beq.n	8001b1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afe:	3324      	adds	r3, #36	; 0x24
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 ffc5 	bl	8002a90 <xTaskRemoveFromEventList>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <xQueueGenericSend+0x1f8>)
 8001b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	f3bf 8f4f 	dsb	sy
 8001b18:	f3bf 8f6f 	isb	sy
 8001b1c:	e00a      	b.n	8001b34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001b24:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <xQueueGenericSend+0x1f8>)
 8001b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	f3bf 8f4f 	dsb	sy
 8001b30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001b34:	f001 fe8a 	bl	800384c <vPortExitCritical>
				return pdPASS;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e063      	b.n	8001c04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d103      	bne.n	8001b4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001b42:	f001 fe83 	bl	800384c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e05c      	b.n	8001c04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d106      	bne.n	8001b5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 ffff 	bl	8002b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001b5e:	f001 fe75 	bl	800384c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001b62:	f000 fd71 	bl	8002648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b66:	f001 fe41 	bl	80037ec <vPortEnterCritical>
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b70:	b25b      	sxtb	r3, r3
 8001b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b76:	d103      	bne.n	8001b80 <xQueueGenericSend+0x16c>
 8001b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b86:	b25b      	sxtb	r3, r3
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d103      	bne.n	8001b96 <xQueueGenericSend+0x182>
 8001b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b96:	f001 fe59 	bl	800384c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b9a:	1d3a      	adds	r2, r7, #4
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 ffee 	bl	8002b84 <xTaskCheckForTimeOut>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d124      	bne.n	8001bf8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bb0:	f000 fa9e 	bl	80020f0 <prvIsQueueFull>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d018      	beq.n	8001bec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbc:	3310      	adds	r3, #16
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 ff14 	bl	80029f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bca:	f000 fa29 	bl	8002020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001bce:	f000 fd49 	bl	8002664 <xTaskResumeAll>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f47f af7c 	bne.w	8001ad2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <xQueueGenericSend+0x1f8>)
 8001bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	f3bf 8f4f 	dsb	sy
 8001be6:	f3bf 8f6f 	isb	sy
 8001bea:	e772      	b.n	8001ad2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bee:	f000 fa17 	bl	8002020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001bf2:	f000 fd37 	bl	8002664 <xTaskResumeAll>
 8001bf6:	e76c      	b.n	8001ad2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bfa:	f000 fa11 	bl	8002020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001bfe:	f000 fd31 	bl	8002664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001c02:	2300      	movs	r3, #0
		}
	}
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3738      	adds	r7, #56	; 0x38
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	e000ed04 	.word	0xe000ed04

08001c10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08e      	sub	sp, #56	; 0x38
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10a      	bne.n	8001c3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2c:	f383 8811 	msr	BASEPRI, r3
 8001c30:	f3bf 8f6f 	isb	sy
 8001c34:	f3bf 8f4f 	dsb	sy
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001c3a:	bf00      	nop
 8001c3c:	e7fe      	b.n	8001c3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d103      	bne.n	8001c4c <xQueueGenericSendFromISR+0x3c>
 8001c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <xQueueGenericSendFromISR+0x40>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <xQueueGenericSendFromISR+0x42>
 8001c50:	2300      	movs	r3, #0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5a:	f383 8811 	msr	BASEPRI, r3
 8001c5e:	f3bf 8f6f 	isb	sy
 8001c62:	f3bf 8f4f 	dsb	sy
 8001c66:	623b      	str	r3, [r7, #32]
}
 8001c68:	bf00      	nop
 8001c6a:	e7fe      	b.n	8001c6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d103      	bne.n	8001c7a <xQueueGenericSendFromISR+0x6a>
 8001c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <xQueueGenericSendFromISR+0x6e>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <xQueueGenericSendFromISR+0x70>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10a      	bne.n	8001c9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c88:	f383 8811 	msr	BASEPRI, r3
 8001c8c:	f3bf 8f6f 	isb	sy
 8001c90:	f3bf 8f4f 	dsb	sy
 8001c94:	61fb      	str	r3, [r7, #28]
}
 8001c96:	bf00      	nop
 8001c98:	e7fe      	b.n	8001c98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c9a:	f001 fe69 	bl	8003970 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001c9e:	f3ef 8211 	mrs	r2, BASEPRI
 8001ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca6:	f383 8811 	msr	BASEPRI, r3
 8001caa:	f3bf 8f6f 	isb	sy
 8001cae:	f3bf 8f4f 	dsb	sy
 8001cb2:	61ba      	str	r2, [r7, #24]
 8001cb4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001cb6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d302      	bcc.n	8001ccc <xQueueGenericSendFromISR+0xbc>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d12c      	bne.n	8001d26 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cdc:	f000 f910 	bl	8001f00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001ce0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d112      	bne.n	8001d10 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d016      	beq.n	8001d20 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	3324      	adds	r3, #36	; 0x24
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 feca 	bl	8002a90 <xTaskRemoveFromEventList>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00e      	beq.n	8001d20 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00b      	beq.n	8001d20 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e007      	b.n	8001d20 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001d10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d14:	3301      	adds	r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	b25a      	sxtb	r2, r3
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001d20:	2301      	movs	r3, #1
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001d24:	e001      	b.n	8001d2a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001d34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3738      	adds	r7, #56	; 0x38
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	; 0x30
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10a      	bne.n	8001d70 <xQueueReceive+0x30>
	__asm volatile
 8001d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	623b      	str	r3, [r7, #32]
}
 8001d6c:	bf00      	nop
 8001d6e:	e7fe      	b.n	8001d6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <xQueueReceive+0x3e>
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <xQueueReceive+0x42>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <xQueueReceive+0x44>
 8001d82:	2300      	movs	r3, #0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10a      	bne.n	8001d9e <xQueueReceive+0x5e>
	__asm volatile
 8001d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8c:	f383 8811 	msr	BASEPRI, r3
 8001d90:	f3bf 8f6f 	isb	sy
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	61fb      	str	r3, [r7, #28]
}
 8001d9a:	bf00      	nop
 8001d9c:	e7fe      	b.n	8001d9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d9e:	f001 f839 	bl	8002e14 <xTaskGetSchedulerState>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <xQueueReceive+0x6e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <xQueueReceive+0x72>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <xQueueReceive+0x74>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <xQueueReceive+0x8e>
	__asm volatile
 8001db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dbc:	f383 8811 	msr	BASEPRI, r3
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	61bb      	str	r3, [r7, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	e7fe      	b.n	8001dcc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001dce:	f001 fd0d 	bl	80037ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01f      	beq.n	8001e1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001de2:	f000 f8f7 	bl	8001fd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00f      	beq.n	8001e16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	3310      	adds	r3, #16
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fe48 	bl	8002a90 <xTaskRemoveFromEventList>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001e06:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <xQueueReceive+0x1bc>)
 8001e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f3bf 8f4f 	dsb	sy
 8001e12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001e16:	f001 fd19 	bl	800384c <vPortExitCritical>
				return pdPASS;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e069      	b.n	8001ef2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d103      	bne.n	8001e2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e24:	f001 fd12 	bl	800384c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e062      	b.n	8001ef2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e32:	f107 0310 	add.w	r3, r7, #16
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fe8e 	bl	8002b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e40:	f001 fd04 	bl	800384c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e44:	f000 fc00 	bl	8002648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e48:	f001 fcd0 	bl	80037ec <vPortEnterCritical>
 8001e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e52:	b25b      	sxtb	r3, r3
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d103      	bne.n	8001e62 <xQueueReceive+0x122>
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6e:	d103      	bne.n	8001e78 <xQueueReceive+0x138>
 8001e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e78:	f001 fce8 	bl	800384c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e7c:	1d3a      	adds	r2, r7, #4
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fe7d 	bl	8002b84 <xTaskCheckForTimeOut>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d123      	bne.n	8001ed8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e92:	f000 f917 	bl	80020c4 <prvIsQueueEmpty>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d017      	beq.n	8001ecc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	3324      	adds	r3, #36	; 0x24
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fda3 	bl	80029f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eac:	f000 f8b8 	bl	8002020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001eb0:	f000 fbd8 	bl	8002664 <xTaskResumeAll>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d189      	bne.n	8001dce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <xQueueReceive+0x1bc>)
 8001ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f3bf 8f4f 	dsb	sy
 8001ec6:	f3bf 8f6f 	isb	sy
 8001eca:	e780      	b.n	8001dce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ece:	f000 f8a7 	bl	8002020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ed2:	f000 fbc7 	bl	8002664 <xTaskResumeAll>
 8001ed6:	e77a      	b.n	8001dce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eda:	f000 f8a1 	bl	8002020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ede:	f000 fbc1 	bl	8002664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ee4:	f000 f8ee 	bl	80020c4 <prvIsQueueEmpty>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f43f af6f 	beq.w	8001dce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001ef0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3730      	adds	r7, #48	; 0x30
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	e000ed04 	.word	0xe000ed04

08001f00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10d      	bne.n	8001f3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d14d      	bne.n	8001fc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 ff90 	bl	8002e50 <xTaskPriorityDisinherit>
 8001f30:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	e043      	b.n	8001fc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d119      	bne.n	8001f74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	f001 ff4a 	bl	8003de4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	441a      	add	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d32b      	bcc.n	8001fc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	e026      	b.n	8001fc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	68d8      	ldr	r0, [r3, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	f001 ff30 	bl	8003de4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	425b      	negs	r3, r3
 8001f8e:	441a      	add	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	425b      	negs	r3, r3
 8001faa:	441a      	add	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d105      	bne.n	8001fc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001fca:	697b      	ldr	r3, [r7, #20]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d018      	beq.n	8002018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	441a      	add	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d303      	bcc.n	8002008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68d9      	ldr	r1, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	461a      	mov	r2, r3
 8002012:	6838      	ldr	r0, [r7, #0]
 8002014:	f001 fee6 	bl	8003de4 <memcpy>
	}
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002028:	f001 fbe0 	bl	80037ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002034:	e011      	b.n	800205a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3324      	adds	r3, #36	; 0x24
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fd24 	bl	8002a90 <xTaskRemoveFromEventList>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800204e:	f000 fdfb 	bl	8002c48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	3b01      	subs	r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	dce9      	bgt.n	8002036 <prvUnlockQueue+0x16>
 8002062:	e000      	b.n	8002066 <prvUnlockQueue+0x46>
					break;
 8002064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	22ff      	movs	r2, #255	; 0xff
 800206a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800206e:	f001 fbed 	bl	800384c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002072:	f001 fbbb 	bl	80037ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800207c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800207e:	e011      	b.n	80020a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d012      	beq.n	80020ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3310      	adds	r3, #16
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fcff 	bl	8002a90 <xTaskRemoveFromEventList>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002098:	f000 fdd6 	bl	8002c48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	3b01      	subs	r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	dce9      	bgt.n	8002080 <prvUnlockQueue+0x60>
 80020ac:	e000      	b.n	80020b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80020ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	22ff      	movs	r2, #255	; 0xff
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80020b8:	f001 fbc8 	bl	800384c <vPortExitCritical>
}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80020cc:	f001 fb8e 	bl	80037ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80020d8:	2301      	movs	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e001      	b.n	80020e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80020e2:	f001 fbb3 	bl	800384c <vPortExitCritical>

	return xReturn;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80020f8:	f001 fb78 	bl	80037ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	429a      	cmp	r2, r3
 8002106:	d102      	bne.n	800210e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002108:	2301      	movs	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e001      	b.n	8002112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002112:	f001 fb9b 	bl	800384c <vPortExitCritical>

	return xReturn;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e014      	b.n	800215a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002130:	4a0e      	ldr	r2, [pc, #56]	; (800216c <vQueueAddToRegistry+0x4c>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800213c:	490b      	ldr	r1, [pc, #44]	; (800216c <vQueueAddToRegistry+0x4c>)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <vQueueAddToRegistry+0x4c>)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002152:	e006      	b.n	8002162 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3301      	adds	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b07      	cmp	r3, #7
 800215e:	d9e7      	bls.n	8002130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	20001f68 	.word	0x20001f68

08002170 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002180:	f001 fb34 	bl	80037ec <vPortEnterCritical>
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800218a:	b25b      	sxtb	r3, r3
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d103      	bne.n	800219a <vQueueWaitForMessageRestricted+0x2a>
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d103      	bne.n	80021b0 <vQueueWaitForMessageRestricted+0x40>
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021b0:	f001 fb4c 	bl	800384c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3324      	adds	r3, #36	; 0x24
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fc37 	bl	8002a38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff28 	bl	8002020 <prvUnlockQueue>
	}
 80021d0:	bf00      	nop
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08e      	sub	sp, #56	; 0x38
 80021dc:	af04      	add	r7, sp, #16
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80021e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <xTaskCreateStatic+0x2a>
	__asm volatile
 80021ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f0:	f383 8811 	msr	BASEPRI, r3
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	623b      	str	r3, [r7, #32]
}
 80021fe:	bf00      	nop
 8002200:	e7fe      	b.n	8002200 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10a      	bne.n	800221e <xTaskCreateStatic+0x46>
	__asm volatile
 8002208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220c:	f383 8811 	msr	BASEPRI, r3
 8002210:	f3bf 8f6f 	isb	sy
 8002214:	f3bf 8f4f 	dsb	sy
 8002218:	61fb      	str	r3, [r7, #28]
}
 800221a:	bf00      	nop
 800221c:	e7fe      	b.n	800221c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800221e:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 8002222:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 800222a:	d00a      	beq.n	8002242 <xTaskCreateStatic+0x6a>
	__asm volatile
 800222c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002230:	f383 8811 	msr	BASEPRI, r3
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	61bb      	str	r3, [r7, #24]
}
 800223e:	bf00      	nop
 8002240:	e7fe      	b.n	8002240 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01e      	beq.n	8002286 <xTaskCreateStatic+0xae>
 8002248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224a:	2b00      	cmp	r3, #0
 800224c:	d01b      	beq.n	8002286 <xTaskCreateStatic+0xae>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002256:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002260:	2300      	movs	r3, #0
 8002262:	9303      	str	r3, [sp, #12]
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f851 	bl	8002320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800227e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002280:	f000 f8d8 	bl	8002434 <prvAddNewTaskToReadyList>
 8002284:	e001      	b.n	800228a <xTaskCreateStatic+0xb2>
		}
		else
		{
			xReturn = NULL;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800228a:	697b      	ldr	r3, [r7, #20]
	}
 800228c:	4618      	mov	r0, r3
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af04      	add	r7, sp, #16
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f001 fb9f 	bl	80039ec <pvPortMalloc>
 80022ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00f      	beq.n	80022d6 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80022b6:	f44f 70a6 	mov.w	r0, #332	; 0x14c
 80022ba:	f001 fb97 	bl	80039ec <pvPortMalloc>
 80022be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
 80022cc:	e005      	b.n	80022da <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f001 fc50 	bl	8003b74 <vPortFree>
 80022d4:	e001      	b.n	80022da <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d017      	beq.n	8002310 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	2300      	movs	r3, #0
 80022ec:	9303      	str	r3, [sp, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	9302      	str	r3, [sp, #8]
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f80e 	bl	8002320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002304:	69f8      	ldr	r0, [r7, #28]
 8002306:	f000 f895 	bl	8002434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800230a:	2301      	movs	r3, #1
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	e002      	b.n	8002316 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002316:	69bb      	ldr	r3, [r7, #24]
	}
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	461a      	mov	r2, r3
 8002338:	21a5      	movs	r1, #165	; 0xa5
 800233a:	f001 fd61 	bl	8003e00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002348:	3b01      	subs	r3, #1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f023 0307 	bic.w	r3, r3, #7
 8002356:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	617b      	str	r3, [r7, #20]
}
 8002374:	bf00      	nop
 8002376:	e7fe      	b.n	8002376 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	e012      	b.n	80023a4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	4413      	add	r3, r2
 8002384:	7819      	ldrb	r1, [r3, #0]
 8002386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	4413      	add	r3, r2
 800238c:	3334      	adds	r3, #52	; 0x34
 800238e:	460a      	mov	r2, r1
 8002390:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2bfe      	cmp	r3, #254	; 0xfe
 80023a8:	d9e9      	bls.n	800237e <prvInitialiseNewTask+0x5e>
 80023aa:	e000      	b.n	80023ae <prvInitialiseNewTask+0x8e>
		{
			break;
 80023ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	2b37      	cmp	r3, #55	; 0x37
 80023ba:	d901      	bls.n	80023c0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023bc:	2337      	movs	r3, #55	; 0x37
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ca:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		pxNewTCB->uxMutexesHeld = 0;
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	2200      	movs	r2, #0
 80023d2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	3304      	adds	r3, #4
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f987 	bl	80016ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	3318      	adds	r3, #24
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f982 	bl	80016ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	2200      	movs	r2, #0
 8002404:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	68f9      	ldr	r1, [r7, #12]
 8002414:	69b8      	ldr	r0, [r7, #24]
 8002416:	f001 f8f5 	bl	8003604 <pxPortInitialiseStack>
 800241a:	4602      	mov	r2, r0
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800242c:	bf00      	nop
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800243c:	f001 f9d6 	bl	80037ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002440:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	4a2c      	ldr	r2, [pc, #176]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 8002448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800244a:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <prvAddNewTaskToReadyList+0xc8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002452:	4a2a      	ldr	r2, [pc, #168]	; (80024fc <prvAddNewTaskToReadyList+0xc8>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d110      	bne.n	8002482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002460:	f000 fc16 	bl	8002c90 <prvInitialiseTaskLists>
 8002464:	e00d      	b.n	8002482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <prvAddNewTaskToReadyList+0xcc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <prvAddNewTaskToReadyList+0xc8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	429a      	cmp	r2, r3
 800247a:	d802      	bhi.n	8002482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800247c:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <prvAddNewTaskToReadyList+0xc8>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <prvAddNewTaskToReadyList+0xd0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a1e      	ldr	r2, [pc, #120]	; (8002504 <prvAddNewTaskToReadyList+0xd0>)
 800248a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800248c:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <prvAddNewTaskToReadyList+0xd0>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249a:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <prvAddNewTaskToReadyList+0xd4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d903      	bls.n	80024aa <prvAddNewTaskToReadyList+0x76>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	4a18      	ldr	r2, [pc, #96]	; (8002508 <prvAddNewTaskToReadyList+0xd4>)
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4a15      	ldr	r2, [pc, #84]	; (800250c <prvAddNewTaskToReadyList+0xd8>)
 80024b8:	441a      	add	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3304      	adds	r3, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f7ff f920 	bl	8001706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80024c6:	f001 f9c1 	bl	800384c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <prvAddNewTaskToReadyList+0xcc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00e      	beq.n	80024f0 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <prvAddNewTaskToReadyList+0xc8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	429a      	cmp	r2, r3
 80024de:	d207      	bcs.n	80024f0 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <prvAddNewTaskToReadyList+0xdc>)
 80024e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000da0 	.word	0x20000da0
 80024fc:	200008cc 	.word	0x200008cc
 8002500:	20000dac 	.word	0x20000dac
 8002504:	20000dbc 	.word	0x20000dbc
 8002508:	20000da8 	.word	0x20000da8
 800250c:	200008d0 	.word	0x200008d0
 8002510:	e000ed04 	.word	0xe000ed04

08002514 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d017      	beq.n	8002556 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <vTaskDelay+0x60>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <vTaskDelay+0x30>
	__asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	60bb      	str	r3, [r7, #8]
}
 8002540:	bf00      	nop
 8002542:	e7fe      	b.n	8002542 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002544:	f000 f880 	bl	8002648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002548:	2100      	movs	r1, #0
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fcf4 	bl	8002f38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002550:	f000 f888 	bl	8002664 <xTaskResumeAll>
 8002554:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <vTaskDelay+0x64>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000dc8 	.word	0x20000dc8
 8002578:	e000ed04 	.word	0xe000ed04

0800257c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800258a:	463a      	mov	r2, r7
 800258c:	1d39      	adds	r1, r7, #4
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff f85a 	bl	800164c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	9202      	str	r2, [sp, #8]
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	2300      	movs	r3, #0
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2300      	movs	r3, #0
 80025a8:	460a      	mov	r2, r1
 80025aa:	4921      	ldr	r1, [pc, #132]	; (8002630 <vTaskStartScheduler+0xb4>)
 80025ac:	4821      	ldr	r0, [pc, #132]	; (8002634 <vTaskStartScheduler+0xb8>)
 80025ae:	f7ff fe13 	bl	80021d8 <xTaskCreateStatic>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a20      	ldr	r2, [pc, #128]	; (8002638 <vTaskStartScheduler+0xbc>)
 80025b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <vTaskStartScheduler+0xbc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80025c0:	2301      	movs	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e001      	b.n	80025ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d102      	bne.n	80025d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80025d0:	f000 fd06 	bl	8002fe0 <xTimerCreateTimerTask>
 80025d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d116      	bne.n	800260a <vTaskStartScheduler+0x8e>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	613b      	str	r3, [r7, #16]
}
 80025ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <vTaskStartScheduler+0xc0>)
 80025f2:	f04f 32ff 	mov.w	r2, #4294967295
 80025f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <vTaskStartScheduler+0xc4>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <vTaskStartScheduler+0xc8>)
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002604:	f001 f880 	bl	8003708 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002608:	e00e      	b.n	8002628 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d10a      	bne.n	8002628 <vTaskStartScheduler+0xac>
	__asm volatile
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	60fb      	str	r3, [r7, #12]
}
 8002624:	bf00      	nop
 8002626:	e7fe      	b.n	8002626 <vTaskStartScheduler+0xaa>
}
 8002628:	bf00      	nop
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	08003e54 	.word	0x08003e54
 8002634:	08002c61 	.word	0x08002c61
 8002638:	20000dc4 	.word	0x20000dc4
 800263c:	20000dc0 	.word	0x20000dc0
 8002640:	20000dac 	.word	0x20000dac
 8002644:	20000da4 	.word	0x20000da4

08002648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <vTaskSuspendAll+0x18>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	4a03      	ldr	r2, [pc, #12]	; (8002660 <vTaskSuspendAll+0x18>)
 8002654:	6013      	str	r3, [r2, #0]
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000dc8 	.word	0x20000dc8

08002664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002672:	4b42      	ldr	r3, [pc, #264]	; (800277c <xTaskResumeAll+0x118>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <xTaskResumeAll+0x2c>
	__asm volatile
 800267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	603b      	str	r3, [r7, #0]
}
 800268c:	bf00      	nop
 800268e:	e7fe      	b.n	800268e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002690:	f001 f8ac 	bl	80037ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002694:	4b39      	ldr	r3, [pc, #228]	; (800277c <xTaskResumeAll+0x118>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3b01      	subs	r3, #1
 800269a:	4a38      	ldr	r2, [pc, #224]	; (800277c <xTaskResumeAll+0x118>)
 800269c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <xTaskResumeAll+0x118>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d162      	bne.n	800276c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026a6:	4b36      	ldr	r3, [pc, #216]	; (8002780 <xTaskResumeAll+0x11c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d05e      	beq.n	800276c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026ae:	e02f      	b.n	8002710 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <xTaskResumeAll+0x120>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3318      	adds	r3, #24
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f87d 	bl	80017bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	3304      	adds	r3, #4
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f878 	bl	80017bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d0:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <xTaskResumeAll+0x124>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d903      	bls.n	80026e0 <xTaskResumeAll+0x7c>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <xTaskResumeAll+0x124>)
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4a27      	ldr	r2, [pc, #156]	; (800278c <xTaskResumeAll+0x128>)
 80026ee:	441a      	add	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f7ff f805 	bl	8001706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002700:	4b23      	ldr	r3, [pc, #140]	; (8002790 <xTaskResumeAll+0x12c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800270a:	4b22      	ldr	r3, [pc, #136]	; (8002794 <xTaskResumeAll+0x130>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002710:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <xTaskResumeAll+0x120>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1cb      	bne.n	80026b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800271e:	f000 fb55 	bl	8002dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <xTaskResumeAll+0x134>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d010      	beq.n	8002750 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800272e:	f000 f845 	bl	80027bc <xTaskIncrementTick>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002738:	4b16      	ldr	r3, [pc, #88]	; (8002794 <xTaskResumeAll+0x130>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3b01      	subs	r3, #1
 8002742:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f1      	bne.n	800272e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <xTaskResumeAll+0x134>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002750:	4b10      	ldr	r3, [pc, #64]	; (8002794 <xTaskResumeAll+0x130>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002758:	2301      	movs	r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <xTaskResumeAll+0x138>)
 800275e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800276c:	f001 f86e 	bl	800384c <vPortExitCritical>

	return xAlreadyYielded;
 8002770:	68bb      	ldr	r3, [r7, #8]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000dc8 	.word	0x20000dc8
 8002780:	20000da0 	.word	0x20000da0
 8002784:	20000d60 	.word	0x20000d60
 8002788:	20000da8 	.word	0x20000da8
 800278c:	200008d0 	.word	0x200008d0
 8002790:	200008cc 	.word	0x200008cc
 8002794:	20000db4 	.word	0x20000db4
 8002798:	20000db0 	.word	0x20000db0
 800279c:	e000ed04 	.word	0xe000ed04

080027a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <xTaskGetTickCount+0x18>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	20000da4 	.word	0x20000da4

080027bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027c6:	4b51      	ldr	r3, [pc, #324]	; (800290c <xTaskIncrementTick+0x150>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 808e 	bne.w	80028ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027d0:	4b4f      	ldr	r3, [pc, #316]	; (8002910 <xTaskIncrementTick+0x154>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80027d8:	4a4d      	ldr	r2, [pc, #308]	; (8002910 <xTaskIncrementTick+0x154>)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d120      	bne.n	8002826 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80027e4:	4b4b      	ldr	r3, [pc, #300]	; (8002914 <xTaskIncrementTick+0x158>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <xTaskIncrementTick+0x48>
	__asm volatile
 80027ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	603b      	str	r3, [r7, #0]
}
 8002800:	bf00      	nop
 8002802:	e7fe      	b.n	8002802 <xTaskIncrementTick+0x46>
 8002804:	4b43      	ldr	r3, [pc, #268]	; (8002914 <xTaskIncrementTick+0x158>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b43      	ldr	r3, [pc, #268]	; (8002918 <xTaskIncrementTick+0x15c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a41      	ldr	r2, [pc, #260]	; (8002914 <xTaskIncrementTick+0x158>)
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4a41      	ldr	r2, [pc, #260]	; (8002918 <xTaskIncrementTick+0x15c>)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b40      	ldr	r3, [pc, #256]	; (800291c <xTaskIncrementTick+0x160>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	4a3f      	ldr	r2, [pc, #252]	; (800291c <xTaskIncrementTick+0x160>)
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	f000 fad3 	bl	8002dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002826:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <xTaskIncrementTick+0x164>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	429a      	cmp	r2, r3
 800282e:	d34e      	bcc.n	80028ce <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002830:	4b38      	ldr	r3, [pc, #224]	; (8002914 <xTaskIncrementTick+0x158>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <xTaskIncrementTick+0x82>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <xTaskIncrementTick+0x84>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002844:	4b36      	ldr	r3, [pc, #216]	; (8002920 <xTaskIncrementTick+0x164>)
 8002846:	f04f 32ff 	mov.w	r2, #4294967295
 800284a:	601a      	str	r2, [r3, #0]
					break;
 800284c:	e03f      	b.n	80028ce <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <xTaskIncrementTick+0x158>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d203      	bcs.n	800286e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002866:	4a2e      	ldr	r2, [pc, #184]	; (8002920 <xTaskIncrementTick+0x164>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6013      	str	r3, [r2, #0]
						break;
 800286c:	e02f      	b.n	80028ce <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	3304      	adds	r3, #4
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe ffa2 	bl	80017bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	3318      	adds	r3, #24
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe ff99 	bl	80017bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288e:	4b25      	ldr	r3, [pc, #148]	; (8002924 <xTaskIncrementTick+0x168>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d903      	bls.n	800289e <xTaskIncrementTick+0xe2>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	4a22      	ldr	r2, [pc, #136]	; (8002924 <xTaskIncrementTick+0x168>)
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <xTaskIncrementTick+0x16c>)
 80028ac:	441a      	add	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	3304      	adds	r3, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f7fe ff26 	bl	8001706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <xTaskIncrementTick+0x170>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d3b3      	bcc.n	8002830 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028cc:	e7b0      	b.n	8002830 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <xTaskIncrementTick+0x170>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	4914      	ldr	r1, [pc, #80]	; (8002928 <xTaskIncrementTick+0x16c>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d907      	bls.n	80028f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e004      	b.n	80028f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <xTaskIncrementTick+0x174>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	4a0f      	ldr	r2, [pc, #60]	; (8002930 <xTaskIncrementTick+0x174>)
 80028f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80028f6:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <xTaskIncrementTick+0x178>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80028fe:	2301      	movs	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002902:	697b      	ldr	r3, [r7, #20]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000dc8 	.word	0x20000dc8
 8002910:	20000da4 	.word	0x20000da4
 8002914:	20000d58 	.word	0x20000d58
 8002918:	20000d5c 	.word	0x20000d5c
 800291c:	20000db8 	.word	0x20000db8
 8002920:	20000dc0 	.word	0x20000dc0
 8002924:	20000da8 	.word	0x20000da8
 8002928:	200008d0 	.word	0x200008d0
 800292c:	200008cc 	.word	0x200008cc
 8002930:	20000db0 	.word	0x20000db0
 8002934:	20000db4 	.word	0x20000db4

08002938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800293e:	4b27      	ldr	r3, [pc, #156]	; (80029dc <vTaskSwitchContext+0xa4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <vTaskSwitchContext+0xa8>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800294c:	e041      	b.n	80029d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <vTaskSwitchContext+0xa8>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002954:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <vTaskSwitchContext+0xac>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e010      	b.n	800297e <vTaskSwitchContext+0x46>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <vTaskSwitchContext+0x40>
	__asm volatile
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	607b      	str	r3, [r7, #4]
}
 8002974:	bf00      	nop
 8002976:	e7fe      	b.n	8002976 <vTaskSwitchContext+0x3e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3b01      	subs	r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	491a      	ldr	r1, [pc, #104]	; (80029e8 <vTaskSwitchContext+0xb0>)
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0e4      	beq.n	800295c <vTaskSwitchContext+0x24>
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <vTaskSwitchContext+0xb0>)
 800299e:	4413      	add	r3, r2
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	3308      	adds	r3, #8
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d104      	bne.n	80029c2 <vTaskSwitchContext+0x8a>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a08      	ldr	r2, [pc, #32]	; (80029ec <vTaskSwitchContext+0xb4>)
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4a05      	ldr	r2, [pc, #20]	; (80029e4 <vTaskSwitchContext+0xac>)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6013      	str	r3, [r2, #0]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	20000dc8 	.word	0x20000dc8
 80029e0:	20000db4 	.word	0x20000db4
 80029e4:	20000da8 	.word	0x20000da8
 80029e8:	200008d0 	.word	0x200008d0
 80029ec:	200008cc 	.word	0x200008cc

080029f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	60fb      	str	r3, [r7, #12]
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <vTaskPlaceOnEventList+0x44>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3318      	adds	r3, #24
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fe94 	bl	800174c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a24:	2101      	movs	r1, #1
 8002a26:	6838      	ldr	r0, [r7, #0]
 8002a28:	f000 fa86 	bl	8002f38 <prvAddCurrentTaskToDelayedList>
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200008cc 	.word	0x200008cc

08002a38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	617b      	str	r3, [r7, #20]
}
 8002a5c:	bf00      	nop
 8002a5e:	e7fe      	b.n	8002a5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <vTaskPlaceOnEventListRestricted+0x54>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3318      	adds	r3, #24
 8002a66:	4619      	mov	r1, r3
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7fe fe4c 	bl	8001706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
 8002a78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	68b8      	ldr	r0, [r7, #8]
 8002a7e:	f000 fa5b 	bl	8002f38 <prvAddCurrentTaskToDelayedList>
	}
 8002a82:	bf00      	nop
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200008cc 	.word	0x200008cc

08002a90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	60fb      	str	r3, [r7, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	e7fe      	b.n	8002aba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	3318      	adds	r3, #24
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe fe7b 	bl	80017bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <xTaskRemoveFromEventList+0xb0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11d      	bne.n	8002b0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fe72 	bl	80017bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <xTaskRemoveFromEventList+0xb4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d903      	bls.n	8002aec <xTaskRemoveFromEventList+0x5c>
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <xTaskRemoveFromEventList+0xb4>)
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <xTaskRemoveFromEventList+0xb8>)
 8002afa:	441a      	add	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	3304      	adds	r3, #4
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7fe fdff 	bl	8001706 <vListInsertEnd>
 8002b08:	e005      	b.n	8002b16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	4619      	mov	r1, r3
 8002b10:	480e      	ldr	r0, [pc, #56]	; (8002b4c <xTaskRemoveFromEventList+0xbc>)
 8002b12:	f7fe fdf8 	bl	8001706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <xTaskRemoveFromEventList+0xc0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d905      	bls.n	8002b30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002b24:	2301      	movs	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <xTaskRemoveFromEventList+0xc4>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e001      	b.n	8002b34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002b34:	697b      	ldr	r3, [r7, #20]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000dc8 	.word	0x20000dc8
 8002b44:	20000da8 	.word	0x20000da8
 8002b48:	200008d0 	.word	0x200008d0
 8002b4c:	20000d60 	.word	0x20000d60
 8002b50:	200008cc 	.word	0x200008cc
 8002b54:	20000db4 	.word	0x20000db4

08002b58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <vTaskInternalSetTimeOutState+0x24>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <vTaskInternalSetTimeOutState+0x28>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	605a      	str	r2, [r3, #4]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000db8 	.word	0x20000db8
 8002b80:	20000da4 	.word	0x20000da4

08002b84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	613b      	str	r3, [r7, #16]
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	60fb      	str	r3, [r7, #12]
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002bc6:	f000 fe11 	bl	80037ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002bca:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <xTaskCheckForTimeOut+0xbc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d102      	bne.n	8002bea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	e023      	b.n	8002c32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <xTaskCheckForTimeOut+0xc0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d007      	beq.n	8002c06 <xTaskCheckForTimeOut+0x82>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d302      	bcc.n	8002c06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002c00:	2301      	movs	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	e015      	b.n	8002c32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d20b      	bcs.n	8002c28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	1ad2      	subs	r2, r2, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff9b 	bl	8002b58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e004      	b.n	8002c32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002c32:	f000 fe0b 	bl	800384c <vPortExitCritical>

	return xReturn;
 8002c36:	69fb      	ldr	r3, [r7, #28]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000da4 	.word	0x20000da4
 8002c44:	20000db8 	.word	0x20000db8

08002c48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <vTaskMissedYield+0x14>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000db4 	.word	0x20000db4

08002c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c68:	f000 f852 	bl	8002d10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <prvIdleTask+0x28>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d9f9      	bls.n	8002c68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <prvIdleTask+0x2c>)
 8002c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c84:	e7f0      	b.n	8002c68 <prvIdleTask+0x8>
 8002c86:	bf00      	nop
 8002c88:	200008d0 	.word	0x200008d0
 8002c8c:	e000ed04 	.word	0xe000ed04

08002c90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	e00c      	b.n	8002cb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <prvInitialiseTaskLists+0x60>)
 8002ca8:	4413      	add	r3, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe fd00 	bl	80016b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b37      	cmp	r3, #55	; 0x37
 8002cba:	d9ef      	bls.n	8002c9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002cbc:	480d      	ldr	r0, [pc, #52]	; (8002cf4 <prvInitialiseTaskLists+0x64>)
 8002cbe:	f7fe fcf7 	bl	80016b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002cc2:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <prvInitialiseTaskLists+0x68>)
 8002cc4:	f7fe fcf4 	bl	80016b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cc8:	480c      	ldr	r0, [pc, #48]	; (8002cfc <prvInitialiseTaskLists+0x6c>)
 8002cca:	f7fe fcf1 	bl	80016b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cce:	480c      	ldr	r0, [pc, #48]	; (8002d00 <prvInitialiseTaskLists+0x70>)
 8002cd0:	f7fe fcee 	bl	80016b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002cd4:	480b      	ldr	r0, [pc, #44]	; (8002d04 <prvInitialiseTaskLists+0x74>)
 8002cd6:	f7fe fceb 	bl	80016b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <prvInitialiseTaskLists+0x78>)
 8002cdc:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <prvInitialiseTaskLists+0x64>)
 8002cde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <prvInitialiseTaskLists+0x7c>)
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <prvInitialiseTaskLists+0x68>)
 8002ce4:	601a      	str	r2, [r3, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200008d0 	.word	0x200008d0
 8002cf4:	20000d30 	.word	0x20000d30
 8002cf8:	20000d44 	.word	0x20000d44
 8002cfc:	20000d60 	.word	0x20000d60
 8002d00:	20000d74 	.word	0x20000d74
 8002d04:	20000d8c 	.word	0x20000d8c
 8002d08:	20000d58 	.word	0x20000d58
 8002d0c:	20000d5c 	.word	0x20000d5c

08002d10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d16:	e019      	b.n	8002d4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d18:	f000 fd68 	bl	80037ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <prvCheckTasksWaitingTermination+0x50>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe fd47 	bl	80017bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <prvCheckTasksWaitingTermination+0x54>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <prvCheckTasksWaitingTermination+0x54>)
 8002d36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <prvCheckTasksWaitingTermination+0x58>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <prvCheckTasksWaitingTermination+0x58>)
 8002d40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d42:	f000 fd83 	bl	800384c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f810 	bl	8002d6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <prvCheckTasksWaitingTermination+0x58>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e1      	bne.n	8002d18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000d74 	.word	0x20000d74
 8002d64:	20000da0 	.word	0x20000da0
 8002d68:	20000d88 	.word	0x20000d88

08002d6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d108      	bne.n	8002d90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fef6 	bl	8003b74 <vPortFree>
				vPortFree( pxTCB );
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fef3 	bl	8003b74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d8e:	e018      	b.n	8002dc2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d103      	bne.n	8002da2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 feea 	bl	8003b74 <vPortFree>
	}
 8002da0:	e00f      	b.n	8002dc2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d00a      	beq.n	8002dc2 <prvDeleteTCB+0x56>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	60fb      	str	r3, [r7, #12]
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <prvDeleteTCB+0x54>
	}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <prvResetNextTaskUnblockTime+0x40>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <prvResetNextTaskUnblockTime+0x14>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <prvResetNextTaskUnblockTime+0x16>
 8002de0:	2300      	movs	r3, #0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d004      	beq.n	8002df0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <prvResetNextTaskUnblockTime+0x44>)
 8002de8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002dee:	e008      	b.n	8002e02 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <prvResetNextTaskUnblockTime+0x40>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <prvResetNextTaskUnblockTime+0x44>)
 8002e00:	6013      	str	r3, [r2, #0]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	20000d58 	.word	0x20000d58
 8002e10:	20000dc0 	.word	0x20000dc0

08002e14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <xTaskGetSchedulerState+0x34>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e22:	2301      	movs	r3, #1
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	e008      	b.n	8002e3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <xTaskGetSchedulerState+0x38>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002e30:	2302      	movs	r3, #2
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	e001      	b.n	8002e3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002e3a:	687b      	ldr	r3, [r7, #4]
	}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000dac 	.word	0x20000dac
 8002e4c:	20000dc8 	.word	0x20000dc8

08002e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d05c      	beq.n	8002f20 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <xTaskPriorityDisinherit+0xdc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d00a      	beq.n	8002e86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	60fb      	str	r3, [r7, #12]
}
 8002e82:	bf00      	nop
 8002e84:	e7fe      	b.n	8002e84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	60bb      	str	r3, [r7, #8]
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002eac:	1e5a      	subs	r2, r3, #1
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d02e      	beq.n	8002f20 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d129      	bne.n	8002f20 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe fc73 	bl	80017bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <xTaskPriorityDisinherit+0xe0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d903      	bls.n	8002f00 <xTaskPriorityDisinherit+0xb0>
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	4a0c      	ldr	r2, [pc, #48]	; (8002f30 <xTaskPriorityDisinherit+0xe0>)
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <xTaskPriorityDisinherit+0xe4>)
 8002f0e:	441a      	add	r2, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f7fe fbf5 	bl	8001706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002f20:	697b      	ldr	r3, [r7, #20]
	}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	200008cc 	.word	0x200008cc
 8002f30:	20000da8 	.word	0x20000da8
 8002f34:	200008d0 	.word	0x200008d0

08002f38 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002f42:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f48:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fc34 	bl	80017bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d10a      	bne.n	8002f72 <prvAddCurrentTaskToDelayedList+0x3a>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3304      	adds	r3, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4819      	ldr	r0, [pc, #100]	; (8002fd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8002f6c:	f7fe fbcb 	bl	8001706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f70:	e026      	b.n	8002fc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d209      	bcs.n	8002f9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f7fe fbd8 	bl	800174c <vListInsert>
}
 8002f9c:	e010      	b.n	8002fc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f7fe fbce 	bl	800174c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d202      	bcs.n	8002fc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002fba:	4a08      	ldr	r2, [pc, #32]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000da4 	.word	0x20000da4
 8002fcc:	200008cc 	.word	0x200008cc
 8002fd0:	20000d8c 	.word	0x20000d8c
 8002fd4:	20000d5c 	.word	0x20000d5c
 8002fd8:	20000d58 	.word	0x20000d58
 8002fdc:	20000dc0 	.word	0x20000dc0

08002fe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002fea:	f000 facb 	bl	8003584 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002fee:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <xTimerCreateTimerTask+0x80>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d021      	beq.n	800303a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002ffe:	1d3a      	adds	r2, r7, #4
 8003000:	f107 0108 	add.w	r1, r7, #8
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe fb37 	bl	800167c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	9202      	str	r2, [sp, #8]
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	2302      	movs	r3, #2
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2300      	movs	r3, #0
 800301e:	460a      	mov	r2, r1
 8003020:	4910      	ldr	r1, [pc, #64]	; (8003064 <xTimerCreateTimerTask+0x84>)
 8003022:	4811      	ldr	r0, [pc, #68]	; (8003068 <xTimerCreateTimerTask+0x88>)
 8003024:	f7ff f8d8 	bl	80021d8 <xTaskCreateStatic>
 8003028:	4603      	mov	r3, r0
 800302a:	4a10      	ldr	r2, [pc, #64]	; (800306c <xTimerCreateTimerTask+0x8c>)
 800302c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800302e:	4b0f      	ldr	r3, [pc, #60]	; (800306c <xTimerCreateTimerTask+0x8c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003036:	2301      	movs	r3, #1
 8003038:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	613b      	str	r3, [r7, #16]
}
 8003052:	bf00      	nop
 8003054:	e7fe      	b.n	8003054 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003056:	697b      	ldr	r3, [r7, #20]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000dfc 	.word	0x20000dfc
 8003064:	08003e5c 	.word	0x08003e5c
 8003068:	0800318d 	.word	0x0800318d
 800306c:	20000e00 	.word	0x20000e00

08003070 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	623b      	str	r3, [r7, #32]
}
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800309e:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <xTimerGenericCommand+0x98>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02a      	beq.n	80030fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	dc18      	bgt.n	80030ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80030b8:	f7ff feac 	bl	8002e14 <xTaskGetSchedulerState>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d109      	bne.n	80030d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <xTimerGenericCommand+0x98>)
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	f107 0110 	add.w	r1, r7, #16
 80030ca:	2300      	movs	r3, #0
 80030cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ce:	f7fe fca1 	bl	8001a14 <xQueueGenericSend>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24
 80030d4:	e012      	b.n	80030fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <xTimerGenericCommand+0x98>)
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	f107 0110 	add.w	r1, r7, #16
 80030de:	2300      	movs	r3, #0
 80030e0:	2200      	movs	r2, #0
 80030e2:	f7fe fc97 	bl	8001a14 <xQueueGenericSend>
 80030e6:	6278      	str	r0, [r7, #36]	; 0x24
 80030e8:	e008      	b.n	80030fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80030ea:	4b07      	ldr	r3, [pc, #28]	; (8003108 <xTimerGenericCommand+0x98>)
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	f107 0110 	add.w	r1, r7, #16
 80030f2:	2300      	movs	r3, #0
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	f7fe fd8b 	bl	8001c10 <xQueueGenericSendFromISR>
 80030fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3728      	adds	r7, #40	; 0x28
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000dfc 	.word	0x20000dfc

0800310c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <prvProcessExpiredTimer+0x7c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3304      	adds	r3, #4
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe fb49 	bl	80017bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d122      	bne.n	8003178 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	18d1      	adds	r1, r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f000 f8c8 	bl	80032d4 <prvInsertTimerInActiveList>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800314a:	2300      	movs	r3, #0
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2300      	movs	r3, #0
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	2100      	movs	r1, #0
 8003154:	6978      	ldr	r0, [r7, #20]
 8003156:	f7ff ff8b 	bl	8003070 <xTimerGenericCommand>
 800315a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	60fb      	str	r3, [r7, #12]
}
 8003174:	bf00      	nop
 8003176:	e7fe      	b.n	8003176 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	6978      	ldr	r0, [r7, #20]
 800317e:	4798      	blx	r3
}
 8003180:	bf00      	nop
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000df4 	.word	0x20000df4

0800318c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003194:	f107 0308 	add.w	r3, r7, #8
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f857 	bl	800324c <prvGetNextExpireTime>
 800319e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4619      	mov	r1, r3
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f803 	bl	80031b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80031aa:	f000 f8d5 	bl	8003358 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031ae:	e7f1      	b.n	8003194 <prvTimerTask+0x8>

080031b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80031ba:	f7ff fa45 	bl	8002648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80031be:	f107 0308 	add.w	r3, r7, #8
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f866 	bl	8003294 <prvSampleTimeNow>
 80031c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d130      	bne.n	8003232 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <prvProcessTimerOrBlockTask+0x3c>
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d806      	bhi.n	80031ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80031de:	f7ff fa41 	bl	8002664 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff91 	bl	800310c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80031ea:	e024      	b.n	8003236 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d008      	beq.n	8003204 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80031f2:	4b13      	ldr	r3, [pc, #76]	; (8003240 <prvProcessTimerOrBlockTask+0x90>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <prvProcessTimerOrBlockTask+0x94>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	4619      	mov	r1, r3
 8003212:	f7fe ffad 	bl	8002170 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003216:	f7ff fa25 	bl	8002664 <xTaskResumeAll>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10a      	bne.n	8003236 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <prvProcessTimerOrBlockTask+0x98>)
 8003222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	f3bf 8f6f 	isb	sy
}
 8003230:	e001      	b.n	8003236 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003232:	f7ff fa17 	bl	8002664 <xTaskResumeAll>
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000df8 	.word	0x20000df8
 8003244:	20000dfc 	.word	0x20000dfc
 8003248:	e000ed04 	.word	0xe000ed04

0800324c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003254:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <prvGetNextExpireTime+0x44>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003272:	4b07      	ldr	r3, [pc, #28]	; (8003290 <prvGetNextExpireTime+0x44>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e001      	b.n	8003282 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000df4 	.word	0x20000df4

08003294 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800329c:	f7ff fa80 	bl	80027a0 <xTaskGetTickCount>
 80032a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <prvSampleTimeNow+0x3c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d205      	bcs.n	80032b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80032ac:	f000 f908 	bl	80034c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e002      	b.n	80032be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80032be:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <prvSampleTimeNow+0x3c>)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80032c4:	68fb      	ldr	r3, [r7, #12]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000e04 	.word	0x20000e04

080032d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d812      	bhi.n	8003320 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	1ad2      	subs	r2, r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	429a      	cmp	r2, r3
 8003306:	d302      	bcc.n	800330e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003308:	2301      	movs	r3, #1
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e01b      	b.n	8003346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <prvInsertTimerInActiveList+0x7c>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3304      	adds	r3, #4
 8003316:	4619      	mov	r1, r3
 8003318:	4610      	mov	r0, r2
 800331a:	f7fe fa17 	bl	800174c <vListInsert>
 800331e:	e012      	b.n	8003346 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d206      	bcs.n	8003336 <prvInsertTimerInActiveList+0x62>
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d302      	bcc.n	8003336 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003330:	2301      	movs	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	e007      	b.n	8003346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <prvInsertTimerInActiveList+0x80>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3304      	adds	r3, #4
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f7fe fa03 	bl	800174c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003346:	697b      	ldr	r3, [r7, #20]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000df8 	.word	0x20000df8
 8003354:	20000df4 	.word	0x20000df4

08003358 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08e      	sub	sp, #56	; 0x38
 800335c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800335e:	e09d      	b.n	800349c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	da18      	bge.n	8003398 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	3304      	adds	r3, #4
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	61fb      	str	r3, [r7, #28]
}
 8003384:	bf00      	nop
 8003386:	e7fe      	b.n	8003386 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338e:	6850      	ldr	r0, [r2, #4]
 8003390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003392:	6892      	ldr	r2, [r2, #8]
 8003394:	4611      	mov	r1, r2
 8003396:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	db7d      	blt.n	800349a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d004      	beq.n	80033b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	3304      	adds	r3, #4
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe fa04 	bl	80017bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033b4:	463b      	mov	r3, r7
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ff6c 	bl	8003294 <prvSampleTimeNow>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b09      	cmp	r3, #9
 80033c2:	d86b      	bhi.n	800349c <prvProcessReceivedCommands+0x144>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <prvProcessReceivedCommands+0x74>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033f5 	.word	0x080033f5
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	080033f5 	.word	0x080033f5
 80033d8:	0800349d 	.word	0x0800349d
 80033dc:	08003451 	.word	0x08003451
 80033e0:	08003489 	.word	0x08003489
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	080033f5 	.word	0x080033f5
 80033ec:	0800349d 	.word	0x0800349d
 80033f0:	08003451 	.word	0x08003451
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	18d1      	adds	r1, r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003402:	f7ff ff67 	bl	80032d4 <prvInsertTimerInActiveList>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d047      	beq.n	800349c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003412:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d13f      	bne.n	800349c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	441a      	add	r2, r3
 8003424:	2300      	movs	r3, #0
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2300      	movs	r3, #0
 800342a:	2100      	movs	r1, #0
 800342c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800342e:	f7ff fe1f 	bl	8003070 <xTimerGenericCommand>
 8003432:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d130      	bne.n	800349c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	61bb      	str	r3, [r7, #24]
}
 800344c:	bf00      	nop
 800344e:	e7fe      	b.n	800344e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	617b      	str	r3, [r7, #20]
}
 8003470:	bf00      	nop
 8003472:	e7fe      	b.n	8003472 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	18d1      	adds	r1, r2, r3
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003482:	f7ff ff27 	bl	80032d4 <prvInsertTimerInActiveList>
					break;
 8003486:	e009      	b.n	800349c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003494:	f000 fb6e 	bl	8003b74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003498:	e000      	b.n	800349c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800349a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <prvProcessReceivedCommands+0x164>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	1d39      	adds	r1, r7, #4
 80034a2:	2200      	movs	r2, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe fc4b 	bl	8001d40 <xQueueReceive>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f47f af57 	bne.w	8003360 <prvProcessReceivedCommands+0x8>
	}
}
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	3730      	adds	r7, #48	; 0x30
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000dfc 	.word	0x20000dfc

080034c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80034c6:	e045      	b.n	8003554 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034c8:	4b2c      	ldr	r3, [pc, #176]	; (800357c <prvSwitchTimerLists+0xbc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034d2:	4b2a      	ldr	r3, [pc, #168]	; (800357c <prvSwitchTimerLists+0xbc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3304      	adds	r3, #4
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe f96b 	bl	80017bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d12e      	bne.n	8003554 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4413      	add	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d90e      	bls.n	8003526 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <prvSwitchTimerLists+0xbc>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3304      	adds	r3, #4
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f7fe f914 	bl	800174c <vListInsert>
 8003524:	e016      	b.n	8003554 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003526:	2300      	movs	r3, #0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2300      	movs	r3, #0
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	2100      	movs	r1, #0
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff fd9d 	bl	8003070 <xTimerGenericCommand>
 8003536:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <prvSwitchTimerLists+0x94>
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	603b      	str	r3, [r7, #0]
}
 8003550:	bf00      	nop
 8003552:	e7fe      	b.n	8003552 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <prvSwitchTimerLists+0xbc>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1b4      	bne.n	80034c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800355e:	4b07      	ldr	r3, [pc, #28]	; (800357c <prvSwitchTimerLists+0xbc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <prvSwitchTimerLists+0xc0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a04      	ldr	r2, [pc, #16]	; (800357c <prvSwitchTimerLists+0xbc>)
 800356a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <prvSwitchTimerLists+0xc0>)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	6013      	str	r3, [r2, #0]
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000df4 	.word	0x20000df4
 8003580:	20000df8 	.word	0x20000df8

08003584 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800358a:	f000 f92f 	bl	80037ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <prvCheckForValidListAndQueue+0x60>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d120      	bne.n	80035d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003596:	4814      	ldr	r0, [pc, #80]	; (80035e8 <prvCheckForValidListAndQueue+0x64>)
 8003598:	f7fe f88a 	bl	80016b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800359c:	4813      	ldr	r0, [pc, #76]	; (80035ec <prvCheckForValidListAndQueue+0x68>)
 800359e:	f7fe f887 	bl	80016b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <prvCheckForValidListAndQueue+0x6c>)
 80035a4:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <prvCheckForValidListAndQueue+0x64>)
 80035a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80035a8:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <prvCheckForValidListAndQueue+0x70>)
 80035aa:	4a10      	ldr	r2, [pc, #64]	; (80035ec <prvCheckForValidListAndQueue+0x68>)
 80035ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80035ae:	2300      	movs	r3, #0
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <prvCheckForValidListAndQueue+0x74>)
 80035b4:	4a11      	ldr	r2, [pc, #68]	; (80035fc <prvCheckForValidListAndQueue+0x78>)
 80035b6:	2110      	movs	r1, #16
 80035b8:	200a      	movs	r0, #10
 80035ba:	f7fe f991 	bl	80018e0 <xQueueGenericCreateStatic>
 80035be:	4603      	mov	r3, r0
 80035c0:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <prvCheckForValidListAndQueue+0x60>)
 80035c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <prvCheckForValidListAndQueue+0x60>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <prvCheckForValidListAndQueue+0x60>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	490b      	ldr	r1, [pc, #44]	; (8003600 <prvCheckForValidListAndQueue+0x7c>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fda4 	bl	8002120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035d8:	f000 f938 	bl	800384c <vPortExitCritical>
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000dfc 	.word	0x20000dfc
 80035e8:	20000dcc 	.word	0x20000dcc
 80035ec:	20000de0 	.word	0x20000de0
 80035f0:	20000df4 	.word	0x20000df4
 80035f4:	20000df8 	.word	0x20000df8
 80035f8:	20000ea8 	.word	0x20000ea8
 80035fc:	20000e08 	.word	0x20000e08
 8003600:	08003e64 	.word	0x08003e64

08003604 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3b04      	subs	r3, #4
 8003614:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800361c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3b04      	subs	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f023 0201 	bic.w	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3b04      	subs	r3, #4
 8003632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003634:	4a08      	ldr	r2, [pc, #32]	; (8003658 <pxPortInitialiseStack+0x54>)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3b14      	subs	r3, #20
 800363e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3b20      	subs	r3, #32
 800364a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800364c:	68fb      	ldr	r3, [r7, #12]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	0800365d 	.word	0x0800365d

0800365c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <prvTaskExitError+0x54>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d00a      	beq.n	8003686 <prvTaskExitError+0x2a>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	60fb      	str	r3, [r7, #12]
}
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <prvTaskExitError+0x28>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	60bb      	str	r3, [r7, #8]
}
 8003698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800369a:	bf00      	nop
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0fc      	beq.n	800369c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036a2:	bf00      	nop
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000010 	.word	0x20000010
	...

080036c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <pxCurrentTCBConst2>)
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	6808      	ldr	r0, [r1, #0]
 80036c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036ca:	f380 8809 	msr	PSP, r0
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f04f 0000 	mov.w	r0, #0
 80036d6:	f380 8811 	msr	BASEPRI, r0
 80036da:	f04e 0e0d 	orr.w	lr, lr, #13
 80036de:	4770      	bx	lr

080036e0 <pxCurrentTCBConst2>:
 80036e0:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop

080036e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80036e8:	4806      	ldr	r0, [pc, #24]	; (8003704 <prvPortStartFirstTask+0x1c>)
 80036ea:	6800      	ldr	r0, [r0, #0]
 80036ec:	6800      	ldr	r0, [r0, #0]
 80036ee:	f380 8808 	msr	MSP, r0
 80036f2:	b662      	cpsie	i
 80036f4:	b661      	cpsie	f
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	df00      	svc	0
 8003700:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003702:	bf00      	nop
 8003704:	e000ed08 	.word	0xe000ed08

08003708 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800370e:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <xPortStartScheduler+0xd0>)
 8003710:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	22ff      	movs	r2, #255	; 0xff
 800371e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <xPortStartScheduler+0xd4>)
 8003734:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003736:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <xPortStartScheduler+0xd8>)
 8003738:	2207      	movs	r2, #7
 800373a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800373c:	e009      	b.n	8003752 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800373e:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <xPortStartScheduler+0xd8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3b01      	subs	r3, #1
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <xPortStartScheduler+0xd8>)
 8003746:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b80      	cmp	r3, #128	; 0x80
 800375c:	d0ef      	beq.n	800373e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <xPortStartScheduler+0xd8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f1c3 0307 	rsb	r3, r3, #7
 8003766:	2b04      	cmp	r3, #4
 8003768:	d00a      	beq.n	8003780 <xPortStartScheduler+0x78>
	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	60bb      	str	r3, [r7, #8]
}
 800377c:	bf00      	nop
 800377e:	e7fe      	b.n	800377e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003780:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <xPortStartScheduler+0xd8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <xPortStartScheduler+0xd8>)
 8003788:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <xPortStartScheduler+0xd8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003792:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <xPortStartScheduler+0xd8>)
 8003794:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <xPortStartScheduler+0xdc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a10      	ldr	r2, [pc, #64]	; (80037e4 <xPortStartScheduler+0xdc>)
 80037a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80037aa:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <xPortStartScheduler+0xdc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <xPortStartScheduler+0xdc>)
 80037b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80037b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80037b6:	f000 f8b9 	bl	800392c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <xPortStartScheduler+0xe0>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80037c0:	f7ff ff92 	bl	80036e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80037c4:	f7ff f8b8 	bl	8002938 <vTaskSwitchContext>
	prvTaskExitError();
 80037c8:	f7ff ff48 	bl	800365c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	e000e400 	.word	0xe000e400
 80037dc:	20000ef8 	.word	0x20000ef8
 80037e0:	20000efc 	.word	0x20000efc
 80037e4:	e000ed20 	.word	0xe000ed20
 80037e8:	20000010 	.word	0x20000010

080037ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	607b      	str	r3, [r7, #4]
}
 8003804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003806:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <vPortEnterCritical+0x58>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	4a0d      	ldr	r2, [pc, #52]	; (8003844 <vPortEnterCritical+0x58>)
 800380e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <vPortEnterCritical+0x58>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10f      	bne.n	8003838 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <vPortEnterCritical+0x5c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <vPortEnterCritical+0x4c>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	603b      	str	r3, [r7, #0]
}
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <vPortEnterCritical+0x4a>
	}
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000010 	.word	0x20000010
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <vPortExitCritical+0x4c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <vPortExitCritical+0x24>
	__asm volatile
 800385a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	607b      	str	r3, [r7, #4]
}
 800386c:	bf00      	nop
 800386e:	e7fe      	b.n	800386e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <vPortExitCritical+0x4c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3b01      	subs	r3, #1
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <vPortExitCritical+0x4c>)
 8003878:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800387a:	4b07      	ldr	r3, [pc, #28]	; (8003898 <vPortExitCritical+0x4c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <vPortExitCritical+0x42>
 8003882:	2300      	movs	r3, #0
 8003884:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f383 8811 	msr	BASEPRI, r3
}
 800388c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	20000010 	.word	0x20000010
 800389c:	00000000 	.word	0x00000000

080038a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80038a0:	f3ef 8009 	mrs	r0, PSP
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <pxCurrentTCBConst>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038b0:	6010      	str	r0, [r2, #0]
 80038b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80038b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038ba:	f380 8811 	msr	BASEPRI, r0
 80038be:	f7ff f83b 	bl	8002938 <vTaskSwitchContext>
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f380 8811 	msr	BASEPRI, r0
 80038ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	6808      	ldr	r0, [r1, #0]
 80038d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038d6:	f380 8809 	msr	PSP, r0
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	4770      	bx	lr

080038e0 <pxCurrentTCBConst>:
 80038e0:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop

080038e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	607b      	str	r3, [r7, #4]
}
 8003900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003902:	f7fe ff5b 	bl	80027bc <xTaskIncrementTick>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <SysTick_Handler+0x40>)
 800390e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	2300      	movs	r3, #0
 8003916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	f383 8811 	msr	BASEPRI, r3
}
 800391e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <vPortSetupTimerInterrupt+0x30>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <vPortSetupTimerInterrupt+0x34>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <vPortSetupTimerInterrupt+0x38>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a09      	ldr	r2, [pc, #36]	; (8003968 <vPortSetupTimerInterrupt+0x3c>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	4a08      	ldr	r2, [pc, #32]	; (800396c <vPortSetupTimerInterrupt+0x40>)
 800394a:	3b01      	subs	r3, #1
 800394c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800394e:	4b03      	ldr	r3, [pc, #12]	; (800395c <vPortSetupTimerInterrupt+0x30>)
 8003950:	2207      	movs	r2, #7
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	e000e010 	.word	0xe000e010
 8003960:	e000e018 	.word	0xe000e018
 8003964:	20000004 	.word	0x20000004
 8003968:	10624dd3 	.word	0x10624dd3
 800396c:	e000e014 	.word	0xe000e014

08003970 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003976:	f3ef 8305 	mrs	r3, IPSR
 800397a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b0f      	cmp	r3, #15
 8003980:	d914      	bls.n	80039ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003982:	4a16      	ldr	r2, [pc, #88]	; (80039dc <vPortValidateInterruptPriority+0x6c>)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <vPortValidateInterruptPriority+0x70>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	7afa      	ldrb	r2, [r7, #11]
 8003992:	429a      	cmp	r2, r3
 8003994:	d20a      	bcs.n	80039ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	607b      	str	r3, [r7, #4]
}
 80039a8:	bf00      	nop
 80039aa:	e7fe      	b.n	80039aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039ac:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <vPortValidateInterruptPriority+0x74>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <vPortValidateInterruptPriority+0x78>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d90a      	bls.n	80039d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	603b      	str	r3, [r7, #0]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <vPortValidateInterruptPriority+0x60>
	}
 80039d2:	bf00      	nop
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	e000e3f0 	.word	0xe000e3f0
 80039e0:	20000ef8 	.word	0x20000ef8
 80039e4:	e000ed0c 	.word	0xe000ed0c
 80039e8:	20000efc 	.word	0x20000efc

080039ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80039f8:	f7fe fe26 	bl	8002648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80039fc:	4b58      	ldr	r3, [pc, #352]	; (8003b60 <pvPortMalloc+0x174>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a04:	f000 f910 	bl	8003c28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a08:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <pvPortMalloc+0x178>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f040 808e 	bne.w	8003b32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01d      	beq.n	8003a58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d014      	beq.n	8003a58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f023 0307 	bic.w	r3, r3, #7
 8003a34:	3308      	adds	r3, #8
 8003a36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <pvPortMalloc+0x6c>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	617b      	str	r3, [r7, #20]
}
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d069      	beq.n	8003b32 <pvPortMalloc+0x146>
 8003a5e:	4b42      	ldr	r3, [pc, #264]	; (8003b68 <pvPortMalloc+0x17c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d864      	bhi.n	8003b32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a68:	4b40      	ldr	r3, [pc, #256]	; (8003b6c <pvPortMalloc+0x180>)
 8003a6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003a6c:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <pvPortMalloc+0x180>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a72:	e004      	b.n	8003a7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d903      	bls.n	8003a90 <pvPortMalloc+0xa4>
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f1      	bne.n	8003a74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003a90:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <pvPortMalloc+0x174>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d04b      	beq.n	8003b32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	4413      	add	r3, r2
 8003aa2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	1ad2      	subs	r2, r2, r3
 8003ab4:	2308      	movs	r3, #8
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d91f      	bls.n	8003afc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <pvPortMalloc+0xf8>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	613b      	str	r3, [r7, #16]
}
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003af6:	69b8      	ldr	r0, [r7, #24]
 8003af8:	f000 f8f8 	bl	8003cec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003afc:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <pvPortMalloc+0x17c>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <pvPortMalloc+0x17c>)
 8003b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <pvPortMalloc+0x17c>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <pvPortMalloc+0x184>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d203      	bcs.n	8003b1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <pvPortMalloc+0x17c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <pvPortMalloc+0x184>)
 8003b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <pvPortMalloc+0x178>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003b32:	f7fe fd97 	bl	8002664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <pvPortMalloc+0x16a>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	60fb      	str	r3, [r7, #12]
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <pvPortMalloc+0x168>
	return pvReturn;
 8003b56:	69fb      	ldr	r3, [r7, #28]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3728      	adds	r7, #40	; 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20001f08 	.word	0x20001f08
 8003b64:	20001f14 	.word	0x20001f14
 8003b68:	20001f0c 	.word	0x20001f0c
 8003b6c:	20001f00 	.word	0x20001f00
 8003b70:	20001f10 	.word	0x20001f10

08003b74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d048      	beq.n	8003c18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003b86:	2308      	movs	r3, #8
 8003b88:	425b      	negs	r3, r3
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <vPortFree+0xac>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <vPortFree+0x44>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	60fb      	str	r3, [r7, #12]
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <vPortFree+0x62>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	60bb      	str	r3, [r7, #8]
}
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <vPortFree+0xac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d019      	beq.n	8003c18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d115      	bne.n	8003c18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <vPortFree+0xac>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003bfc:	f7fe fd24 	bl	8002648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <vPortFree+0xb0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4413      	add	r3, r2
 8003c0a:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <vPortFree+0xb0>)
 8003c0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c0e:	6938      	ldr	r0, [r7, #16]
 8003c10:	f000 f86c 	bl	8003cec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003c14:	f7fe fd26 	bl	8002664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003c18:	bf00      	nop
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20001f14 	.word	0x20001f14
 8003c24:	20001f0c 	.word	0x20001f0c

08003c28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <prvHeapInit+0xac>)
 8003c36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00c      	beq.n	8003c5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3307      	adds	r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0307 	bic.w	r3, r3, #7
 8003c4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <prvHeapInit+0xac>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c60:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <prvHeapInit+0xb0>)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c66:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <prvHeapInit+0xb0>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4413      	add	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c74:	2208      	movs	r2, #8
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0307 	bic.w	r3, r3, #7
 8003c82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <prvHeapInit+0xb4>)
 8003c88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <prvHeapInit+0xb4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <prvHeapInit+0xb4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	1ad2      	subs	r2, r2, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <prvHeapInit+0xb4>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <prvHeapInit+0xb8>)
 8003cb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <prvHeapInit+0xbc>)
 8003cbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003cc0:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <prvHeapInit+0xc0>)
 8003cc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cc6:	601a      	str	r2, [r3, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000f00 	.word	0x20000f00
 8003cd8:	20001f00 	.word	0x20001f00
 8003cdc:	20001f08 	.word	0x20001f08
 8003ce0:	20001f10 	.word	0x20001f10
 8003ce4:	20001f0c 	.word	0x20001f0c
 8003ce8:	20001f14 	.word	0x20001f14

08003cec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003cf4:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <prvInsertBlockIntoFreeList+0xa8>)
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e002      	b.n	8003d00 <prvInsertBlockIntoFreeList+0x14>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d8f7      	bhi.n	8003cfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	4413      	add	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d108      	bne.n	8003d2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	441a      	add	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	441a      	add	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d118      	bne.n	8003d74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <prvInsertBlockIntoFreeList+0xac>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d00d      	beq.n	8003d6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	441a      	add	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e008      	b.n	8003d7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <prvInsertBlockIntoFreeList+0xac>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	e003      	b.n	8003d7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d002      	beq.n	8003d8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr
 8003d94:	20001f00 	.word	0x20001f00
 8003d98:	20001f08 	.word	0x20001f08

08003d9c <__libc_init_array>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	2600      	movs	r6, #0
 8003da0:	4d0c      	ldr	r5, [pc, #48]	; (8003dd4 <__libc_init_array+0x38>)
 8003da2:	4c0d      	ldr	r4, [pc, #52]	; (8003dd8 <__libc_init_array+0x3c>)
 8003da4:	1b64      	subs	r4, r4, r5
 8003da6:	10a4      	asrs	r4, r4, #2
 8003da8:	42a6      	cmp	r6, r4
 8003daa:	d109      	bne.n	8003dc0 <__libc_init_array+0x24>
 8003dac:	f000 f830 	bl	8003e10 <_init>
 8003db0:	2600      	movs	r6, #0
 8003db2:	4d0a      	ldr	r5, [pc, #40]	; (8003ddc <__libc_init_array+0x40>)
 8003db4:	4c0a      	ldr	r4, [pc, #40]	; (8003de0 <__libc_init_array+0x44>)
 8003db6:	1b64      	subs	r4, r4, r5
 8003db8:	10a4      	asrs	r4, r4, #2
 8003dba:	42a6      	cmp	r6, r4
 8003dbc:	d105      	bne.n	8003dca <__libc_init_array+0x2e>
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
 8003dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc4:	4798      	blx	r3
 8003dc6:	3601      	adds	r6, #1
 8003dc8:	e7ee      	b.n	8003da8 <__libc_init_array+0xc>
 8003dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dce:	4798      	blx	r3
 8003dd0:	3601      	adds	r6, #1
 8003dd2:	e7f2      	b.n	8003dba <__libc_init_array+0x1e>
 8003dd4:	08003ea8 	.word	0x08003ea8
 8003dd8:	08003ea8 	.word	0x08003ea8
 8003ddc:	08003ea8 	.word	0x08003ea8
 8003de0:	08003eac 	.word	0x08003eac

08003de4 <memcpy>:
 8003de4:	440a      	add	r2, r1
 8003de6:	4291      	cmp	r1, r2
 8003de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dec:	d100      	bne.n	8003df0 <memcpy+0xc>
 8003dee:	4770      	bx	lr
 8003df0:	b510      	push	{r4, lr}
 8003df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003df6:	4291      	cmp	r1, r2
 8003df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dfc:	d1f9      	bne.n	8003df2 <memcpy+0xe>
 8003dfe:	bd10      	pop	{r4, pc}

08003e00 <memset>:
 8003e00:	4603      	mov	r3, r0
 8003e02:	4402      	add	r2, r0
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d100      	bne.n	8003e0a <memset+0xa>
 8003e08:	4770      	bx	lr
 8003e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e0e:	e7f9      	b.n	8003e04 <memset+0x4>

08003e10 <_init>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	bf00      	nop
 8003e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e16:	bc08      	pop	{r3}
 8003e18:	469e      	mov	lr, r3
 8003e1a:	4770      	bx	lr

08003e1c <_fini>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	bf00      	nop
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr
