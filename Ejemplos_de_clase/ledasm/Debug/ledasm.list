
ledasm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000170  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002a0  080002a8  000102a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002a0  080002a0  000102a8  2**0
                  CONTENTS
  4 .ARM          00000000  080002a0  080002a0  000102a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002a0  080002a8  000102a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002a0  080002a0  000102a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002a4  080002a4  000102a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002a8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102a8  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000f7  00000000  00000000  000102d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00000048  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000026  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000000a7  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  00010528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000002c  00000000  00000000  00010548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000288 	.word	0x08000288

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000288 	.word	0x08000288

08000170 <main>:
/*	main NO TIENE QUE TERMINAR NUNCA	*/
/****************************************/
		.type		main, %function
main:
		//Inicializo el pin como salida
		BL		led_init
 8000170:	f000 f80d 	bl	800018e <led_init>

08000174 <main_loop>:

		//Enciendo el led
main_loop:
		MOVS	R0,#1
 8000174:	2001      	movs	r0, #1
		BL		led_set
 8000176:	f000 f818 	bl	80001aa <led_set>

		//Demora
		LDR		R0,=#LOOP_COMPARE
 800017a:	4812      	ldr	r0, [pc, #72]	; (80001c4 <delay_dec+0x6>)
		BL		delay
 800017c:	f000 f81e 	bl	80001bc <delay>

		//Apago el led
		MOVS	R0,#0
 8000180:	2000      	movs	r0, #0
		BL		led_set
 8000182:	f000 f812 	bl	80001aa <led_set>

		//Demora*8
		LDR		R0,=#LOOP_COMPARE*8
 8000186:	4810      	ldr	r0, [pc, #64]	; (80001c8 <delay_dec+0xa>)
		BL		delay
 8000188:	f000 f818 	bl	80001bc <delay>

		//Volver a empezar...
		B		main_loop
 800018c:	e7f2      	b.n	8000174 <main_loop>

0800018e <led_init>:
/*	Función led_init. 				 	*/
/*	Inicializa El LED					*/
/****************************************/
		.type	delay, %function
led_init:
		PUSH	{R1, R2, LR}		// Mando a la pila los registros que modifico y LR
 800018e:	b506      	push	{r1, r2, lr}
		LDR		R1, =(1 << 4)       // Cargo en R1 el bit que me habilita el GPIOC
 8000190:	490e      	ldr	r1, [pc, #56]	; (80001cc <delay_dec+0xe>)
		LDR 	R2, =#RCC_APB2ENR   // Cargo la dirección de memoria
 8000192:	4a0f      	ldr	r2, [pc, #60]	; (80001d0 <delay_dec+0x12>)
		STR		R1, [R2]            // Habilito la señal de reloj para GPIOC
 8000194:	6011      	str	r1, [r2, #0]
									//Pongo GPIOC13 como salida.
		LDR 	R1, =(0b11 << 20)
 8000196:	490f      	ldr	r1, [pc, #60]	; (80001d4 <delay_dec+0x16>)
		LDR 	R2, =#GPIOC_CHR
 8000198:	4a0f      	ldr	r2, [pc, #60]	; (80001d8 <delay_dec+0x1a>)
		STR 	R1, [R2]
 800019a:	6011      	str	r1, [r2, #0]
		/*HABILITO RELOJ PUERTO A*/
		LDR		R1, =(1 << 2)
 800019c:	490f      	ldr	r1, [pc, #60]	; (80001dc <delay_dec+0x1e>)
		LDR 	R2, =#RCC_APB2ENR
 800019e:	4a0c      	ldr	r2, [pc, #48]	; (80001d0 <delay_dec+0x12>)
		STR		R1, [R2]
 80001a0:	6011      	str	r1, [r2, #0]
		/*PUERTO A 0 - 7 COMO ENTRADA PULL - UP*/
		LDR		R1, =#0x88888888 	//cnf1_X=1 cnf0_x=0 Mode_0_x=0 mode_1_x=1
 80001a2:	490f      	ldr	r1, [pc, #60]	; (80001e0 <delay_dec+0x22>)
		LDR 	R2, =#GPIOA_CRL
 80001a4:	4a0f      	ldr	r2, [pc, #60]	; (80001e4 <delay_dec+0x26>)
		STR		R1, [R2]
 80001a6:	6011      	str	r1, [r2, #0]
		/*                                      */
		POP		{R1, R2, PC}
 80001a8:	bd06      	pop	{r1, r2, pc}

080001aa <led_set>:
/*	Función led_set. 				 	*/
/*	Setea el led en funcion de R0		*/
/****************************************/
		.type	delay, %function
led_set:
		PUSH	{R0, R1, R2}		// Mando a la pila todos los registros que modifico
 80001aa:	b407      	push	{r0, r1, r2}
		MVNS	R0,R0				// R0   = ~R0
 80001ac:	43c0      	mvns	r0, r0
		MOVS	R1,#1				// R1   = 0x01
 80001ae:	2101      	movs	r1, #1
		ANDS	R0,R0,R1			// R0 & = 0x01
 80001b0:	4008      	ands	r0, r1
		LSLS	R0,R0,#13			// R0 <<= 13
 80001b2:	0340      	lsls	r0, r0, #13
		ldr 	R2, =#PORTC_ODR   	// Escribo la dirección de memoria para setear GPIOC
 80001b4:	4a0c      	ldr	r2, [pc, #48]	; (80001e8 <delay_dec+0x2a>)
		STR 	R0, [R2]          	// Escribo el puerto de salida
 80001b6:	6010      	str	r0, [r2, #0]
		POP		{R0, R1, R2}		// Repongo los registros que toqué.
 80001b8:	bc07      	pop	{r0, r1, r2}
		BX		LR					// return
 80001ba:	4770      	bx	lr

080001bc <delay>:
/*	Función delay. 				 		*/
/*	Recibe por R0 la demora				*/
/****************************************/
		.type	delay, %function
delay:
		PUSH	{R0, LR}			// Guardo el parámetro y LR en la pila.
 80001bc:	b501      	push	{r0, lr}

080001be <delay_dec>:
delay_dec:
        SUBS	R0, 1				//
 80001be:	3801      	subs	r0, #1
        BNE		delay_dec			// while(--R0);
 80001c0:	d1fd      	bne.n	80001be <delay_dec>
		POP		{R0, PC}			// repongo R0 y vuelvo.
 80001c2:	bd01      	pop	{r0, pc}
		LDR		R0,=#LOOP_COMPARE
 80001c4:	0002ffff 	.word	0x0002ffff
		LDR		R0,=#LOOP_COMPARE*8
 80001c8:	0017fff8 	.word	0x0017fff8
		LDR		R1, =(1 << 4)       // Cargo en R1 el bit que me habilita el GPIOC
 80001cc:	00000010 	.word	0x00000010
		LDR 	R2, =#RCC_APB2ENR   // Cargo la dirección de memoria
 80001d0:	40021018 	.word	0x40021018
		LDR 	R1, =(0b11 << 20)
 80001d4:	00300000 	.word	0x00300000
		LDR 	R2, =#GPIOC_CHR
 80001d8:	40011004 	.word	0x40011004
		LDR		R1, =(1 << 2)
 80001dc:	00000004 	.word	0x00000004
		LDR		R1, =#0x88888888 	//cnf1_X=1 cnf0_x=0 Mode_0_x=0 mode_1_x=1
 80001e0:	88888888 	.word	0x88888888
		LDR 	R2, =#GPIOA_CRL
 80001e4:	40010800 	.word	0x40010800
		ldr 	R2, =#PORTC_ODR   	// Escribo la dirección de memoria para setear GPIOC
 80001e8:	4001100c 	.word	0x4001100c

080001ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f4:	480c      	ldr	r0, [pc, #48]	; (8000228 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f6:	490d      	ldr	r1, [pc, #52]	; (800022c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <LoopForever+0xe>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001fc:	e002      	b.n	8000204 <LoopCopyDataInit>

080001fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000202:	3304      	adds	r3, #4

08000204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000208:	d3f9      	bcc.n	80001fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020a:	4a0a      	ldr	r2, [pc, #40]	; (8000234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800020c:	4c0a      	ldr	r4, [pc, #40]	; (8000238 <LoopForever+0x16>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000210:	e001      	b.n	8000216 <LoopFillZerobss>

08000212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000214:	3204      	adds	r2, #4

08000216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000218:	d3fb      	bcc.n	8000212 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021a:	f000 f811 	bl	8000240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021e:	f7ff ffa7 	bl	8000170 <main>

08000222 <LoopForever>:

LoopForever:
    b LoopForever
 8000222:	e7fe      	b.n	8000222 <LoopForever>
  ldr   r0, =_estack
 8000224:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800022c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000230:	080002a8 	.word	0x080002a8
  ldr r2, =_sbss
 8000234:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000238:	2000001c 	.word	0x2000001c

0800023c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC1_2_IRQHandler>
	...

08000240 <__libc_init_array>:
 8000240:	b570      	push	{r4, r5, r6, lr}
 8000242:	2600      	movs	r6, #0
 8000244:	4d0c      	ldr	r5, [pc, #48]	; (8000278 <__libc_init_array+0x38>)
 8000246:	4c0d      	ldr	r4, [pc, #52]	; (800027c <__libc_init_array+0x3c>)
 8000248:	1b64      	subs	r4, r4, r5
 800024a:	10a4      	asrs	r4, r4, #2
 800024c:	42a6      	cmp	r6, r4
 800024e:	d109      	bne.n	8000264 <__libc_init_array+0x24>
 8000250:	f000 f81a 	bl	8000288 <_init>
 8000254:	2600      	movs	r6, #0
 8000256:	4d0a      	ldr	r5, [pc, #40]	; (8000280 <__libc_init_array+0x40>)
 8000258:	4c0a      	ldr	r4, [pc, #40]	; (8000284 <__libc_init_array+0x44>)
 800025a:	1b64      	subs	r4, r4, r5
 800025c:	10a4      	asrs	r4, r4, #2
 800025e:	42a6      	cmp	r6, r4
 8000260:	d105      	bne.n	800026e <__libc_init_array+0x2e>
 8000262:	bd70      	pop	{r4, r5, r6, pc}
 8000264:	f855 3b04 	ldr.w	r3, [r5], #4
 8000268:	4798      	blx	r3
 800026a:	3601      	adds	r6, #1
 800026c:	e7ee      	b.n	800024c <__libc_init_array+0xc>
 800026e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000272:	4798      	blx	r3
 8000274:	3601      	adds	r6, #1
 8000276:	e7f2      	b.n	800025e <__libc_init_array+0x1e>
 8000278:	080002a0 	.word	0x080002a0
 800027c:	080002a0 	.word	0x080002a0
 8000280:	080002a0 	.word	0x080002a0
 8000284:	080002a4 	.word	0x080002a4

08000288 <_init>:
 8000288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028a:	bf00      	nop
 800028c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800028e:	bc08      	pop	{r3}
 8000290:	469e      	mov	lr, r3
 8000292:	4770      	bx	lr

08000294 <_fini>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	bf00      	nop
 8000298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029a:	bc08      	pop	{r3}
 800029c:	469e      	mov	lr, r3
 800029e:	4770      	bx	lr
